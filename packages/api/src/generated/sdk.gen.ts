// This file is auto-generated by @hey-api/openapi-ts

import {
  type Client,
  formDataBodySerializer,
  type Options as Options2,
  type TDataShape,
} from '@hey-api/client-fetch';
import { client } from './client.gen.js';
import type {
  ActiveTableSessionControllerCloseData,
  ActiveTableSessionControllerCloseErrors,
  ActiveTableSessionControllerCloseResponses,
  ActiveTableSessionControllerCreateManualSessionData,
  ActiveTableSessionControllerCreateManualSessionErrors,
  ActiveTableSessionControllerCreateManualSessionResponses,
  ActiveTableSessionControllerFindActiveByStoreData,
  ActiveTableSessionControllerFindActiveByStoreResponses,
  ActiveTableSessionControllerFindByTokenData,
  ActiveTableSessionControllerFindByTokenErrors,
  ActiveTableSessionControllerFindByTokenResponses,
  ActiveTableSessionControllerFindOneData,
  ActiveTableSessionControllerFindOneErrors,
  ActiveTableSessionControllerFindOneResponses,
  ActiveTableSessionControllerJoinByTableData,
  ActiveTableSessionControllerJoinByTableErrors,
  ActiveTableSessionControllerJoinByTableResponses,
  ActiveTableSessionControllerUpdateData,
  ActiveTableSessionControllerUpdateErrors,
  ActiveTableSessionControllerUpdateResponses,
  AuditLogControllerExportAuditLogsData,
  AuditLogControllerExportAuditLogsResponses,
  AuditLogControllerGetStoreAuditLogsData,
  AuditLogControllerGetStoreAuditLogsResponses,
  AuthControllerGetAuth0ConfigData,
  AuthControllerGetAuth0ConfigResponses,
  AuthControllerGetAuth0ProfileData,
  AuthControllerGetAuth0ProfileErrors,
  AuthControllerGetAuth0ProfileResponses,
  AuthControllerLoginWithStoreData,
  AuthControllerLoginWithStoreErrors,
  AuthControllerLoginWithStoreResponses,
  AuthControllerValidateAuth0TokenData,
  AuthControllerValidateAuth0TokenErrors,
  AuthControllerValidateAuth0TokenResponses,
  CartControllerAddItemData,
  CartControllerAddItemErrors,
  CartControllerAddItemResponses,
  CartControllerClearCartData,
  CartControllerClearCartErrors,
  CartControllerClearCartResponses,
  CartControllerGetCartData,
  CartControllerGetCartErrors,
  CartControllerGetCartResponses,
  CartControllerRemoveItemData,
  CartControllerRemoveItemErrors,
  CartControllerRemoveItemResponses,
  CartControllerUpdateItemData,
  CartControllerUpdateItemErrors,
  CartControllerUpdateItemResponses,
  CategoryControllerCreateData,
  CategoryControllerCreateResponses,
  CategoryControllerFindAllData,
  CategoryControllerFindAllResponses,
  CategoryControllerFindOneData,
  CategoryControllerFindOneResponses,
  CategoryControllerRemoveData,
  CategoryControllerRemoveResponses,
  CategoryControllerSortCategoriesData,
  CategoryControllerSortCategoriesResponses,
  CategoryControllerUpdateData,
  CategoryControllerUpdateResponses,
  HealthControllerHealthCheckData,
  HealthControllerHealthCheckResponses,
  KitchenControllerGetOrderDetailsData,
  KitchenControllerGetOrderDetailsResponses,
  KitchenControllerGetOrdersData,
  KitchenControllerGetOrdersResponses,
  KitchenControllerUpdateOrderStatusData,
  KitchenControllerUpdateOrderStatusResponses,
  MenuControllerCreateMenuItemData,
  MenuControllerCreateMenuItemResponses,
  MenuControllerDeleteMenuItemData,
  MenuControllerDeleteMenuItemResponses,
  MenuControllerGetMenuItemByIdData,
  MenuControllerGetMenuItemByIdResponses,
  MenuControllerGetStoreMenuItemsData,
  MenuControllerGetStoreMenuItemsResponses,
  MenuControllerUpdateMenuItemData,
  MenuControllerUpdateMenuItemResponses,
  OrderControllerApplyDiscountData,
  OrderControllerApplyDiscountErrors,
  OrderControllerApplyDiscountResponses,
  OrderControllerCheckoutData,
  OrderControllerCheckoutErrors,
  OrderControllerCheckoutResponses,
  OrderControllerFindBySessionData,
  OrderControllerFindBySessionResponses,
  OrderControllerFindByStoreData,
  OrderControllerFindByStoreResponses,
  OrderControllerFindForKdsData,
  OrderControllerFindForKdsResponses,
  OrderControllerFindOneData,
  OrderControllerFindOneErrors,
  OrderControllerFindOneResponses,
  OrderControllerRemoveDiscountData,
  OrderControllerRemoveDiscountErrors,
  OrderControllerRemoveDiscountResponses,
  OrderControllerUpdateStatusData,
  OrderControllerUpdateStatusErrors,
  OrderControllerUpdateStatusResponses,
  PaymentControllerCalculateSplitData,
  PaymentControllerCalculateSplitErrors,
  PaymentControllerCalculateSplitResponses,
  PaymentControllerCreateRefundData,
  PaymentControllerCreateRefundErrors,
  PaymentControllerCreateRefundResponses,
  PaymentControllerFindPaymentsByOrderData,
  PaymentControllerFindPaymentsByOrderErrors,
  PaymentControllerFindPaymentsByOrderResponses,
  PaymentControllerFindRefundsByOrderData,
  PaymentControllerFindRefundsByOrderErrors,
  PaymentControllerFindRefundsByOrderResponses,
  PaymentControllerGetPaymentSummaryData,
  PaymentControllerGetPaymentSummaryErrors,
  PaymentControllerGetPaymentSummaryResponses,
  PaymentControllerRecordPaymentData,
  PaymentControllerRecordPaymentErrors,
  PaymentControllerRecordPaymentResponses,
  PaymentControllerRecordSplitPaymentData,
  PaymentControllerRecordSplitPaymentErrors,
  PaymentControllerRecordSplitPaymentResponses,
  ReportControllerGetOrderStatusReportData,
  ReportControllerGetOrderStatusReportResponses,
  ReportControllerGetPaymentBreakdownData,
  ReportControllerGetPaymentBreakdownResponses,
  ReportControllerGetPopularItemsData,
  ReportControllerGetPopularItemsResponses,
  ReportControllerGetSalesSummaryData,
  ReportControllerGetSalesSummaryResponses,
  StoreControllerCreateStoreData,
  StoreControllerCreateStoreErrors,
  StoreControllerCreateStoreResponses,
  StoreControllerGetStoreDetailsData,
  StoreControllerGetStoreDetailsErrors,
  StoreControllerGetStoreDetailsResponses,
  StoreControllerInviteOrAssignRoleByEmailData,
  StoreControllerInviteOrAssignRoleByEmailErrors,
  StoreControllerInviteOrAssignRoleByEmailResponses,
  StoreControllerUpdateBusinessHoursData,
  StoreControllerUpdateBusinessHoursErrors,
  StoreControllerUpdateBusinessHoursResponses,
  StoreControllerUpdateLoyaltyRulesData,
  StoreControllerUpdateLoyaltyRulesErrors,
  StoreControllerUpdateLoyaltyRulesResponses,
  StoreControllerUpdateStoreInformationData,
  StoreControllerUpdateStoreInformationErrors,
  StoreControllerUpdateStoreInformationResponses,
  StoreControllerUpdateStoreSettingsData,
  StoreControllerUpdateStoreSettingsErrors,
  StoreControllerUpdateStoreSettingsResponses,
  StoreControllerUpdateTaxAndServiceChargeData,
  StoreControllerUpdateTaxAndServiceChargeErrors,
  StoreControllerUpdateTaxAndServiceChargeResponses,
  StoreControllerUploadBrandingData,
  StoreControllerUploadBrandingErrors,
  StoreControllerUploadBrandingResponses,
  TableControllerCreateTableData,
  TableControllerCreateTableResponses,
  TableControllerDeleteTableData,
  TableControllerDeleteTableResponses,
  TableControllerFindAllByStoreData,
  TableControllerFindAllByStoreResponses,
  TableControllerFindOneData,
  TableControllerFindOneResponses,
  TableControllerSyncTablesData,
  TableControllerSyncTablesResponses,
  TableControllerUpdateTableData,
  TableControllerUpdateTableResponses,
  TableControllerUpdateTableStatusData,
  TableControllerUpdateTableStatusResponses,
  TierControllerGetStoreTierData,
  TierControllerGetStoreTierResponses,
  TierControllerGetStoreUsageData,
  TierControllerGetStoreUsageResponses,
  UploadControllerUploadImageData,
  UploadControllerUploadImageErrors,
  UploadControllerUploadImageResponses,
  UserControllerAddUserToStoreData,
  UserControllerAddUserToStoreErrors,
  UserControllerAddUserToStoreResponses,
  UserControllerChangeRoleData,
  UserControllerChangeRoleErrors,
  UserControllerChangeRoleResponses,
  UserControllerGetCurrentUserData,
  UserControllerGetCurrentUserResponses,
  UserControllerGetUserStoresData,
  UserControllerGetUserStoresErrors,
  UserControllerGetUserStoresResponses,
  UserControllerInviteStaffData,
  UserControllerInviteStaffErrors,
  UserControllerInviteStaffResponses,
  UserControllerReactivateUserData,
  UserControllerReactivateUserErrors,
  UserControllerReactivateUserResponses,
  UserControllerRegisterData,
  UserControllerRegisterErrors,
  UserControllerRegisterResponses,
  UserControllerSuspendUserData,
  UserControllerSuspendUserErrors,
  UserControllerSuspendUserResponses,
} from './types.gen.js';

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = Options2<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

/**
 * Create manual session (counter, phone, takeout)
 * Staff-initiated orders without table association. Requires OWNER, ADMIN, SERVER, or CASHIER role.
 */
export const activeTableSessionControllerCreateManualSession = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    ActiveTableSessionControllerCreateManualSessionData,
    ThrowOnError
  >
) => {
  return (options.client ?? client).post<
    ActiveTableSessionControllerCreateManualSessionResponses,
    ActiveTableSessionControllerCreateManualSessionErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/active-table-sessions/manual',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Join or create a session for a table
 * Customers scan QR code on table. Returns existing active session or creates new one.
 */
export const activeTableSessionControllerJoinByTable = <
  ThrowOnError extends boolean = false,
>(
  options: Options<ActiveTableSessionControllerJoinByTableData, ThrowOnError>
) => {
  return (options.client ?? client).post<
    ActiveTableSessionControllerJoinByTableResponses,
    ActiveTableSessionControllerJoinByTableErrors,
    ThrowOnError
  >({
    url: '/active-table-sessions/join-by-table/{tableId}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Get session by ID
 */
export const activeTableSessionControllerFindOne = <
  ThrowOnError extends boolean = false,
>(
  options: Options<ActiveTableSessionControllerFindOneData, ThrowOnError>
) => {
  return (options.client ?? client).get<
    ActiveTableSessionControllerFindOneResponses,
    ActiveTableSessionControllerFindOneErrors,
    ThrowOnError
  >({
    url: '/active-table-sessions/{sessionId}',
    ...options,
  });
};

/**
 * Update session (Restaurant Management System only)
 */
export const activeTableSessionControllerUpdate = <
  ThrowOnError extends boolean = false,
>(
  options: Options<ActiveTableSessionControllerUpdateData, ThrowOnError>
) => {
  return (options.client ?? client).put<
    ActiveTableSessionControllerUpdateResponses,
    ActiveTableSessionControllerUpdateErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/active-table-sessions/{sessionId}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Get session by token
 */
export const activeTableSessionControllerFindByToken = <
  ThrowOnError extends boolean = false,
>(
  options: Options<ActiveTableSessionControllerFindByTokenData, ThrowOnError>
) => {
  return (options.client ?? client).get<
    ActiveTableSessionControllerFindByTokenResponses,
    ActiveTableSessionControllerFindByTokenErrors,
    ThrowOnError
  >({
    url: '/active-table-sessions/token/{token}',
    ...options,
  });
};

/**
 * Get all active sessions for a store (POS)
 */
export const activeTableSessionControllerFindActiveByStore = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    ActiveTableSessionControllerFindActiveByStoreData,
    ThrowOnError
  >
) => {
  return (options.client ?? client).get<
    ActiveTableSessionControllerFindActiveByStoreResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/active-table-sessions',
    ...options,
  });
};

/**
 * Close session (Restaurant Management System only)
 */
export const activeTableSessionControllerClose = <
  ThrowOnError extends boolean = false,
>(
  options: Options<ActiveTableSessionControllerCloseData, ThrowOnError>
) => {
  return (options.client ?? client).post<
    ActiveTableSessionControllerCloseResponses,
    ActiveTableSessionControllerCloseErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/active-table-sessions/{sessionId}/close',
    ...options,
  });
};

/**
 * Select a store to complete login
 */
export const authControllerLoginWithStore = <
  ThrowOnError extends boolean = false,
>(
  options: Options<AuthControllerLoginWithStoreData, ThrowOnError>
) => {
  return (options.client ?? client).post<
    AuthControllerLoginWithStoreResponses,
    AuthControllerLoginWithStoreErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/auth/login/store',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Get Auth0 configuration for frontend
 */
export const authControllerGetAuth0Config = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<AuthControllerGetAuth0ConfigData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    AuthControllerGetAuth0ConfigResponses,
    unknown,
    ThrowOnError
  >({
    url: '/auth/auth0/config',
    ...options,
  });
};

/**
 * Validate Auth0 access token and sync user
 */
export const authControllerValidateAuth0Token = <
  ThrowOnError extends boolean = false,
>(
  options: Options<AuthControllerValidateAuth0TokenData, ThrowOnError>
) => {
  return (options.client ?? client).post<
    AuthControllerValidateAuth0TokenResponses,
    AuthControllerValidateAuth0TokenErrors,
    ThrowOnError
  >({
    url: '/auth/auth0/validate',
    ...options,
  });
};

/**
 * Get user profile (Auth0 protected)
 */
export const authControllerGetAuth0Profile = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<AuthControllerGetAuth0ProfileData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    AuthControllerGetAuth0ProfileResponses,
    AuthControllerGetAuth0ProfileErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/auth/auth0/profile',
    ...options,
  });
};

/**
 * Register a new user (sends verification email)
 */
export const userControllerRegister = <ThrowOnError extends boolean = false>(
  options: Options<UserControllerRegisterData, ThrowOnError>
) => {
  return (options.client ?? client).post<
    UserControllerRegisterResponses,
    UserControllerRegisterErrors,
    ThrowOnError
  >({
    url: '/users/register',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Assign a user to a store with a role (Admin/Owner Protected - Example)
 */
export const userControllerAddUserToStore = <
  ThrowOnError extends boolean = false,
>(
  options: Options<UserControllerAddUserToStoreData, ThrowOnError>
) => {
  return (options.client ?? client).post<
    UserControllerAddUserToStoreResponses,
    UserControllerAddUserToStoreErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/users/add-to-store',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Get all store memberships for a specific user (Protected)
 */
export const userControllerGetUserStores = <
  ThrowOnError extends boolean = false,
>(
  options: Options<UserControllerGetUserStoresData, ThrowOnError>
) => {
  return (options.client ?? client).get<
    UserControllerGetUserStoresResponses,
    UserControllerGetUserStoresErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/users/{id}/stores',
    ...options,
  });
};

/**
 * Get current logged-in user profile, optionally scoped to a store
 */
export const userControllerGetCurrentUser = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<UserControllerGetCurrentUserData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    UserControllerGetCurrentUserResponses,
    unknown,
    ThrowOnError
  >({
    url: '/users/me',
    ...options,
  });
};

/**
 * Invite a staff member to join a store (Owner/Admin only)
 */
export const userControllerInviteStaff = <ThrowOnError extends boolean = false>(
  options: Options<UserControllerInviteStaffData, ThrowOnError>
) => {
  return (options.client ?? client).post<
    UserControllerInviteStaffResponses,
    UserControllerInviteStaffErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/users/stores/{storeId}/invite-staff',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Change a user's role within a store (Owner only)
 */
export const userControllerChangeRole = <ThrowOnError extends boolean = false>(
  options: Options<UserControllerChangeRoleData, ThrowOnError>
) => {
  return (options.client ?? client).patch<
    UserControllerChangeRoleResponses,
    UserControllerChangeRoleErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/users/stores/{storeId}/users/{targetUserId}/role',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Suspend a user account (Owner/Admin only)
 */
export const userControllerSuspendUser = <ThrowOnError extends boolean = false>(
  options: Options<UserControllerSuspendUserData, ThrowOnError>
) => {
  return (options.client ?? client).patch<
    UserControllerSuspendUserResponses,
    UserControllerSuspendUserErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/users/stores/{storeId}/users/{targetUserId}/suspend',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Reactivate a suspended user account (Owner/Admin only)
 */
export const userControllerReactivateUser = <
  ThrowOnError extends boolean = false,
>(
  options: Options<UserControllerReactivateUserData, ThrowOnError>
) => {
  return (options.client ?? client).patch<
    UserControllerReactivateUserResponses,
    UserControllerReactivateUserErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/users/stores/{storeId}/users/{targetUserId}/reactivate',
    ...options,
  });
};

export const tierControllerGetStoreTier = <
  ThrowOnError extends boolean = false,
>(
  options: Options<TierControllerGetStoreTierData, ThrowOnError>
) => {
  return (options.client ?? client).get<
    TierControllerGetStoreTierResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/tier/{storeId}',
    ...options,
  });
};

export const tierControllerGetStoreUsage = <
  ThrowOnError extends boolean = false,
>(
  options: Options<TierControllerGetStoreUsageData, ThrowOnError>
) => {
  return (options.client ?? client).get<
    TierControllerGetStoreUsageResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/tier/{storeId}/usage',
    ...options,
  });
};

export const auditLogControllerGetStoreAuditLogs = <
  ThrowOnError extends boolean = false,
>(
  options: Options<AuditLogControllerGetStoreAuditLogsData, ThrowOnError>
) => {
  return (options.client ?? client).get<
    AuditLogControllerGetStoreAuditLogsResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/audit-logs/{storeId}',
    ...options,
  });
};

export const auditLogControllerExportAuditLogs = <
  ThrowOnError extends boolean = false,
>(
  options: Options<AuditLogControllerExportAuditLogsData, ThrowOnError>
) => {
  return (options.client ?? client).get<
    AuditLogControllerExportAuditLogsResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/audit-logs/{storeId}/export',
    ...options,
  });
};

/**
 * Clear all items from cart
 */
export const cartControllerClearCart = <ThrowOnError extends boolean = false>(
  options: Options<CartControllerClearCartData, ThrowOnError>
) => {
  return (options.client ?? client).delete<
    CartControllerClearCartResponses,
    CartControllerClearCartErrors,
    ThrowOnError
  >({
    url: '/cart',
    ...options,
  });
};

/**
 * Get current cart for session
 */
export const cartControllerGetCart = <ThrowOnError extends boolean = false>(
  options: Options<CartControllerGetCartData, ThrowOnError>
) => {
  return (options.client ?? client).get<
    CartControllerGetCartResponses,
    CartControllerGetCartErrors,
    ThrowOnError
  >({
    url: '/cart',
    ...options,
  });
};

/**
 * Add item to cart
 */
export const cartControllerAddItem = <ThrowOnError extends boolean = false>(
  options: Options<CartControllerAddItemData, ThrowOnError>
) => {
  return (options.client ?? client).post<
    CartControllerAddItemResponses,
    CartControllerAddItemErrors,
    ThrowOnError
  >({
    url: '/cart/items',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Remove item from cart
 */
export const cartControllerRemoveItem = <ThrowOnError extends boolean = false>(
  options: Options<CartControllerRemoveItemData, ThrowOnError>
) => {
  return (options.client ?? client).delete<
    CartControllerRemoveItemResponses,
    CartControllerRemoveItemErrors,
    ThrowOnError
  >({
    url: '/cart/items/{cartItemId}',
    ...options,
  });
};

/**
 * Update cart item
 */
export const cartControllerUpdateItem = <ThrowOnError extends boolean = false>(
  options: Options<CartControllerUpdateItemData, ThrowOnError>
) => {
  return (options.client ?? client).patch<
    CartControllerUpdateItemResponses,
    CartControllerUpdateItemErrors,
    ThrowOnError
  >({
    url: '/cart/items/{cartItemId}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Get all active categories (with items) for a specific store (Public)
 * Retrieves categories for a store using EITHER storeId OR storeSlug query parameter. Query parameters are defined in the GetCategoriesQueryDto schema.
 */
export const categoryControllerFindAll = <ThrowOnError extends boolean = false>(
  options?: Options<CategoryControllerFindAllData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    CategoryControllerFindAllResponses,
    unknown,
    ThrowOnError
  >({
    url: '/categories',
    ...options,
  });
};

/**
 * Create a new category (OWNER/ADMIN Required)
 */
export const categoryControllerCreate = <ThrowOnError extends boolean = false>(
  options: Options<CategoryControllerCreateData, ThrowOnError>
) => {
  return (options.client ?? client).post<
    CategoryControllerCreateResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/categories',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Delete a category (OWNER/ADMIN Required)
 */
export const categoryControllerRemove = <ThrowOnError extends boolean = false>(
  options: Options<CategoryControllerRemoveData, ThrowOnError>
) => {
  return (options.client ?? client).delete<
    CategoryControllerRemoveResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/categories/{id}',
    ...options,
  });
};

/**
 * Get a specific category by ID (Public)
 */
export const categoryControllerFindOne = <ThrowOnError extends boolean = false>(
  options: Options<CategoryControllerFindOneData, ThrowOnError>
) => {
  return (options.client ?? client).get<
    CategoryControllerFindOneResponses,
    unknown,
    ThrowOnError
  >({
    url: '/categories/{id}',
    ...options,
  });
};

/**
 * Update a category name (OWNER/ADMIN Required)
 */
export const categoryControllerUpdate = <ThrowOnError extends boolean = false>(
  options: Options<CategoryControllerUpdateData, ThrowOnError>
) => {
  return (options.client ?? client).patch<
    CategoryControllerUpdateResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/categories/{id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Reorder categories and their menu items (OWNER/ADMIN Required)
 */
export const categoryControllerSortCategories = <
  ThrowOnError extends boolean = false,
>(
  options: Options<CategoryControllerSortCategoriesData, ThrowOnError>
) => {
  return (options.client ?? client).patch<
    CategoryControllerSortCategoriesResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/categories/sort',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Upload an image file
 */
export const uploadControllerUploadImage = <
  ThrowOnError extends boolean = false,
>(
  options: Options<UploadControllerUploadImageData, ThrowOnError>
) => {
  return (options.client ?? client).post<
    UploadControllerUploadImageResponses,
    UploadControllerUploadImageErrors,
    ThrowOnError
  >({
    ...formDataBodySerializer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/upload/image',
    ...options,
    headers: {
      'Content-Type': null,
      ...options.headers,
    },
  });
};

export const healthControllerHealthCheck = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<HealthControllerHealthCheckData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    HealthControllerHealthCheckResponses,
    unknown,
    ThrowOnError
  >({
    url: '/health',
    ...options,
  });
};

/**
 * Get orders for kitchen display
 */
export const kitchenControllerGetOrders = <
  ThrowOnError extends boolean = false,
>(
  options: Options<KitchenControllerGetOrdersData, ThrowOnError>
) => {
  return (options.client ?? client).get<
    KitchenControllerGetOrdersResponses,
    unknown,
    ThrowOnError
  >({
    url: '/kitchen/orders',
    ...options,
  });
};

/**
 * Get order details for kitchen display
 */
export const kitchenControllerGetOrderDetails = <
  ThrowOnError extends boolean = false,
>(
  options: Options<KitchenControllerGetOrderDetailsData, ThrowOnError>
) => {
  return (options.client ?? client).get<
    KitchenControllerGetOrderDetailsResponses,
    unknown,
    ThrowOnError
  >({
    url: '/kitchen/orders/{orderId}',
    ...options,
  });
};

/**
 * Update order kitchen status
 */
export const kitchenControllerUpdateOrderStatus = <
  ThrowOnError extends boolean = false,
>(
  options: Options<KitchenControllerUpdateOrderStatusData, ThrowOnError>
) => {
  return (options.client ?? client).patch<
    KitchenControllerUpdateOrderStatusResponses,
    unknown,
    ThrowOnError
  >({
    url: '/kitchen/orders/{orderId}/status',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Get all menu items for a specific store (Public)
 */
export const menuControllerGetStoreMenuItems = <
  ThrowOnError extends boolean = false,
>(
  options: Options<MenuControllerGetStoreMenuItemsData, ThrowOnError>
) => {
  return (options.client ?? client).get<
    MenuControllerGetStoreMenuItemsResponses,
    unknown,
    ThrowOnError
  >({
    url: '/menu-items',
    ...options,
  });
};

/**
 * Create a menu item (OWNER or ADMIN)
 */
export const menuControllerCreateMenuItem = <
  ThrowOnError extends boolean = false,
>(
  options: Options<MenuControllerCreateMenuItemData, ThrowOnError>
) => {
  return (options.client ?? client).post<
    MenuControllerCreateMenuItemResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/menu-items',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Delete a menu item (OWNER or ADMIN)
 */
export const menuControllerDeleteMenuItem = <
  ThrowOnError extends boolean = false,
>(
  options: Options<MenuControllerDeleteMenuItemData, ThrowOnError>
) => {
  return (options.client ?? client).delete<
    MenuControllerDeleteMenuItemResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/menu-items/{id}',
    ...options,
  });
};

/**
 * Get a single menu item by ID (Public)
 */
export const menuControllerGetMenuItemById = <
  ThrowOnError extends boolean = false,
>(
  options: Options<MenuControllerGetMenuItemByIdData, ThrowOnError>
) => {
  return (options.client ?? client).get<
    MenuControllerGetMenuItemByIdResponses,
    unknown,
    ThrowOnError
  >({
    url: '/menu-items/{id}',
    ...options,
  });
};

/**
 * Update a menu item (OWNER or ADMIN)
 */
export const menuControllerUpdateMenuItem = <
  ThrowOnError extends boolean = false,
>(
  options: Options<MenuControllerUpdateMenuItemData, ThrowOnError>
) => {
  return (options.client ?? client).put<
    MenuControllerUpdateMenuItemResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/menu-items/{id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Checkout cart and create order (SOS)
 * Converts cart to order and clears the cart
 */
export const orderControllerCheckout = <ThrowOnError extends boolean = false>(
  options: Options<OrderControllerCheckoutData, ThrowOnError>
) => {
  return (options.client ?? client).post<
    OrderControllerCheckoutResponses,
    OrderControllerCheckoutErrors,
    ThrowOnError
  >({
    url: '/orders/checkout',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Get order by ID
 */
export const orderControllerFindOne = <ThrowOnError extends boolean = false>(
  options: Options<OrderControllerFindOneData, ThrowOnError>
) => {
  return (options.client ?? client).get<
    OrderControllerFindOneResponses,
    OrderControllerFindOneErrors,
    ThrowOnError
  >({
    url: '/orders/{orderId}',
    ...options,
  });
};

/**
 * Get all orders for a session (SOS)
 */
export const orderControllerFindBySession = <
  ThrowOnError extends boolean = false,
>(
  options: Options<OrderControllerFindBySessionData, ThrowOnError>
) => {
  return (options.client ?? client).get<
    OrderControllerFindBySessionResponses,
    unknown,
    ThrowOnError
  >({
    url: '/orders/session/{sessionId}',
    ...options,
  });
};

/**
 * Get orders for Kitchen Display System (KDS)
 * Returns active kitchen orders with optional status filtering. Optimized for real-time kitchen operations.
 */
export const orderControllerFindForKds = <ThrowOnError extends boolean = false>(
  options: Options<OrderControllerFindForKdsData, ThrowOnError>
) => {
  return (options.client ?? client).get<
    OrderControllerFindForKdsResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/orders/kds',
    ...options,
  });
};

/**
 * Get all orders for a store with pagination (POS)
 * Returns paginated list of orders for a specific store
 */
export const orderControllerFindByStore = <
  ThrowOnError extends boolean = false,
>(
  options: Options<OrderControllerFindByStoreData, ThrowOnError>
) => {
  return (options.client ?? client).get<
    OrderControllerFindByStoreResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/orders',
    ...options,
  });
};

/**
 * Update order status (POS)
 * Update order status through kitchen workflow
 */
export const orderControllerUpdateStatus = <
  ThrowOnError extends boolean = false,
>(
  options: Options<OrderControllerUpdateStatusData, ThrowOnError>
) => {
  return (options.client ?? client).patch<
    OrderControllerUpdateStatusResponses,
    OrderControllerUpdateStatusErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/orders/{orderId}/status',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Apply discount to order (POS)
 * Apply percentage or fixed amount discount to an order. Implements 3-tier authorization: Small (<10%) = CASHIER, Medium (10-50%) = ADMIN, Large (>50%) = OWNER
 */
export const orderControllerApplyDiscount = <
  ThrowOnError extends boolean = false,
>(
  options: Options<OrderControllerApplyDiscountData, ThrowOnError>
) => {
  return (options.client ?? client).post<
    OrderControllerApplyDiscountResponses,
    OrderControllerApplyDiscountErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/orders/{orderId}/apply-discount',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Remove discount from order (POS)
 * Remove previously applied discount. Requires ADMIN or OWNER role.
 */
export const orderControllerRemoveDiscount = <
  ThrowOnError extends boolean = false,
>(
  options: Options<OrderControllerRemoveDiscountData, ThrowOnError>
) => {
  return (options.client ?? client).delete<
    OrderControllerRemoveDiscountResponses,
    OrderControllerRemoveDiscountErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/orders/{orderId}/discount',
    ...options,
  });
};

/**
 * Get all payments for an order
 */
export const paymentControllerFindPaymentsByOrder = <
  ThrowOnError extends boolean = false,
>(
  options: Options<PaymentControllerFindPaymentsByOrderData, ThrowOnError>
) => {
  return (options.client ?? client).get<
    PaymentControllerFindPaymentsByOrderResponses,
    PaymentControllerFindPaymentsByOrderErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/payments/orders/{orderId}',
    ...options,
  });
};

/**
 * Record payment for an order (POS)
 * Record a payment and update order status if fully paid
 */
export const paymentControllerRecordPayment = <
  ThrowOnError extends boolean = false,
>(
  options: Options<PaymentControllerRecordPaymentData, ThrowOnError>
) => {
  return (options.client ?? client).post<
    PaymentControllerRecordPaymentResponses,
    PaymentControllerRecordPaymentErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/payments/orders/{orderId}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Get payment summary for an order
 */
export const paymentControllerGetPaymentSummary = <
  ThrowOnError extends boolean = false,
>(
  options: Options<PaymentControllerGetPaymentSummaryData, ThrowOnError>
) => {
  return (options.client ?? client).get<
    PaymentControllerGetPaymentSummaryResponses,
    PaymentControllerGetPaymentSummaryErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/payments/orders/{orderId}/summary',
    ...options,
  });
};

/**
 * Get all refunds for an order
 */
export const paymentControllerFindRefundsByOrder = <
  ThrowOnError extends boolean = false,
>(
  options: Options<PaymentControllerFindRefundsByOrderData, ThrowOnError>
) => {
  return (options.client ?? client).get<
    PaymentControllerFindRefundsByOrderResponses,
    PaymentControllerFindRefundsByOrderErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/payments/orders/{orderId}/refunds',
    ...options,
  });
};

/**
 * Create refund for an order (POS)
 * Issue a refund for a paid order
 */
export const paymentControllerCreateRefund = <
  ThrowOnError extends boolean = false,
>(
  options: Options<PaymentControllerCreateRefundData, ThrowOnError>
) => {
  return (options.client ?? client).post<
    PaymentControllerCreateRefundResponses,
    PaymentControllerCreateRefundErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/payments/orders/{orderId}/refunds',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Calculate bill split amounts for an order
 * Calculate how to split an order bill among guests (EVEN, BY_ITEM, or CUSTOM)
 */
export const paymentControllerCalculateSplit = <
  ThrowOnError extends boolean = false,
>(
  options: Options<PaymentControllerCalculateSplitData, ThrowOnError>
) => {
  return (options.client ?? client).post<
    PaymentControllerCalculateSplitResponses,
    PaymentControllerCalculateSplitErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/payments/orders/{orderId}/calculate-split',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Record a split payment for an order
 * Record a split payment as part of a bill splitting transaction
 */
export const paymentControllerRecordSplitPayment = <
  ThrowOnError extends boolean = false,
>(
  options: Options<PaymentControllerRecordSplitPaymentData, ThrowOnError>
) => {
  return (options.client ?? client).post<
    PaymentControllerRecordSplitPaymentResponses,
    PaymentControllerRecordSplitPaymentErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/payments/orders/{orderId}/split-payment',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Get sales summary report
 */
export const reportControllerGetSalesSummary = <
  ThrowOnError extends boolean = false,
>(
  options: Options<ReportControllerGetSalesSummaryData, ThrowOnError>
) => {
  return (options.client ?? client).get<
    ReportControllerGetSalesSummaryResponses,
    unknown,
    ThrowOnError
  >({
    url: '/reports/sales-summary',
    ...options,
  });
};

/**
 * Get payment method breakdown report
 */
export const reportControllerGetPaymentBreakdown = <
  ThrowOnError extends boolean = false,
>(
  options: Options<ReportControllerGetPaymentBreakdownData, ThrowOnError>
) => {
  return (options.client ?? client).get<
    ReportControllerGetPaymentBreakdownResponses,
    unknown,
    ThrowOnError
  >({
    url: '/reports/payment-breakdown',
    ...options,
  });
};

/**
 * Get popular menu items report
 */
export const reportControllerGetPopularItems = <
  ThrowOnError extends boolean = false,
>(
  options: Options<ReportControllerGetPopularItemsData, ThrowOnError>
) => {
  return (options.client ?? client).get<
    ReportControllerGetPopularItemsResponses,
    unknown,
    ThrowOnError
  >({
    url: '/reports/popular-items',
    ...options,
  });
};

/**
 * Get order status distribution report
 */
export const reportControllerGetOrderStatusReport = <
  ThrowOnError extends boolean = false,
>(
  options: Options<ReportControllerGetOrderStatusReportData, ThrowOnError>
) => {
  return (options.client ?? client).get<
    ReportControllerGetOrderStatusReportResponses,
    unknown,
    ThrowOnError
  >({
    url: '/reports/order-status',
    ...options,
  });
};

/**
 * Get public details for a specific store by ID
 */
export const storeControllerGetStoreDetails = <
  ThrowOnError extends boolean = false,
>(
  options: Options<StoreControllerGetStoreDetailsData, ThrowOnError>
) => {
  return (options.client ?? client).get<
    StoreControllerGetStoreDetailsResponses,
    StoreControllerGetStoreDetailsErrors,
    ThrowOnError
  >({
    url: '/stores/{id}',
    ...options,
  });
};

/**
 * Create a store (creator becomes OWNER)
 */
export const storeControllerCreateStore = <
  ThrowOnError extends boolean = false,
>(
  options: Options<StoreControllerCreateStoreData, ThrowOnError>
) => {
  return (options.client ?? client).post<
    StoreControllerCreateStoreResponses,
    StoreControllerCreateStoreErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/stores',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Update a store details (OWNER or ADMIN only)
 */
export const storeControllerUpdateStoreInformation = <
  ThrowOnError extends boolean = false,
>(
  options: Options<StoreControllerUpdateStoreInformationData, ThrowOnError>
) => {
  return (options.client ?? client).put<
    StoreControllerUpdateStoreInformationResponses,
    StoreControllerUpdateStoreInformationErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/stores/{id}/information',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Update store settings (OWNER or ADMIN only)
 */
export const storeControllerUpdateStoreSettings = <
  ThrowOnError extends boolean = false,
>(
  options: Options<StoreControllerUpdateStoreSettingsData, ThrowOnError>
) => {
  return (options.client ?? client).put<
    StoreControllerUpdateStoreSettingsResponses,
    StoreControllerUpdateStoreSettingsErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/stores/{id}/settings',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Invite a new user or assign/update role for an existing user by email (Role permissions apply)
 * Owner can assign any role. Admin can assign STAFF/CHEF roles. If user email doesnt exist, an invite might be implicitly handled by the service (or throw error).
 */
export const storeControllerInviteOrAssignRoleByEmail = <
  ThrowOnError extends boolean = false,
>(
  options: Options<StoreControllerInviteOrAssignRoleByEmailData, ThrowOnError>
) => {
  return (options.client ?? client).post<
    StoreControllerInviteOrAssignRoleByEmailResponses,
    StoreControllerInviteOrAssignRoleByEmailErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/stores/{id}/invite-assign-role',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Update tax and service charge rates (OWNER or ADMIN only)
 */
export const storeControllerUpdateTaxAndServiceCharge = <
  ThrowOnError extends boolean = false,
>(
  options: Options<StoreControllerUpdateTaxAndServiceChargeData, ThrowOnError>
) => {
  return (options.client ?? client).patch<
    StoreControllerUpdateTaxAndServiceChargeResponses,
    StoreControllerUpdateTaxAndServiceChargeErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/stores/{id}/settings/tax-and-service',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Update business hours (OWNER or ADMIN only)
 */
export const storeControllerUpdateBusinessHours = <
  ThrowOnError extends boolean = false,
>(
  options: Options<StoreControllerUpdateBusinessHoursData, ThrowOnError>
) => {
  return (options.client ?? client).patch<
    StoreControllerUpdateBusinessHoursResponses,
    StoreControllerUpdateBusinessHoursErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/stores/{id}/settings/business-hours',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Upload branding images (logo and/or cover) (OWNER or ADMIN only)
 */
export const storeControllerUploadBranding = <
  ThrowOnError extends boolean = false,
>(
  options: Options<StoreControllerUploadBrandingData, ThrowOnError>
) => {
  return (options.client ?? client).post<
    StoreControllerUploadBrandingResponses,
    StoreControllerUploadBrandingErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/stores/{id}/settings/branding',
    ...options,
  });
};

/**
 * Update loyalty program rules (OWNER only)
 */
export const storeControllerUpdateLoyaltyRules = <
  ThrowOnError extends boolean = false,
>(
  options: Options<StoreControllerUpdateLoyaltyRulesData, ThrowOnError>
) => {
  return (options.client ?? client).patch<
    StoreControllerUpdateLoyaltyRulesResponses,
    StoreControllerUpdateLoyaltyRulesErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/stores/{id}/settings/loyalty-rules',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Get all tables for a specific store (Public)
 */
export const tableControllerFindAllByStore = <
  ThrowOnError extends boolean = false,
>(
  options: Options<TableControllerFindAllByStoreData, ThrowOnError>
) => {
  return (options.client ?? client).get<
    TableControllerFindAllByStoreResponses,
    unknown,
    ThrowOnError
  >({
    url: '/stores/{storeId}/tables',
    ...options,
  });
};

/**
 * Create a new table (OWNER/ADMIN Required)
 */
export const tableControllerCreateTable = <
  ThrowOnError extends boolean = false,
>(
  options: Options<TableControllerCreateTableData, ThrowOnError>
) => {
  return (options.client ?? client).post<
    TableControllerCreateTableResponses,
    unknown,
    ThrowOnError
  >({
    url: '/stores/{storeId}/tables',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Synchronize tables for a store (OWNER/ADMIN Required)
 * Creates/Updates tables based on the input list. Deletes any existing tables for the store that are NOT included in the input list (by ID). Checks for active sessions before deleting.
 */
export const tableControllerSyncTables = <ThrowOnError extends boolean = false>(
  options: Options<TableControllerSyncTablesData, ThrowOnError>
) => {
  return (options.client ?? client).put<
    TableControllerSyncTablesResponses,
    unknown,
    ThrowOnError
  >({
    url: '/stores/{storeId}/tables/batch-sync',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Delete a table (OWNER/ADMIN Required)
 */
export const tableControllerDeleteTable = <
  ThrowOnError extends boolean = false,
>(
  options: Options<TableControllerDeleteTableData, ThrowOnError>
) => {
  return (options.client ?? client).delete<
    TableControllerDeleteTableResponses,
    unknown,
    ThrowOnError
  >({
    url: '/stores/{storeId}/tables/{tableId}',
    ...options,
  });
};

/**
 * Get a specific table by ID (Public)
 */
export const tableControllerFindOne = <ThrowOnError extends boolean = false>(
  options: Options<TableControllerFindOneData, ThrowOnError>
) => {
  return (options.client ?? client).get<
    TableControllerFindOneResponses,
    unknown,
    ThrowOnError
  >({
    url: '/stores/{storeId}/tables/{tableId}',
    ...options,
  });
};

/**
 * Update a table name (OWNER/ADMIN Required)
 */
export const tableControllerUpdateTable = <
  ThrowOnError extends boolean = false,
>(
  options: Options<TableControllerUpdateTableData, ThrowOnError>
) => {
  return (options.client ?? client).patch<
    TableControllerUpdateTableResponses,
    unknown,
    ThrowOnError
  >({
    url: '/stores/{storeId}/tables/{tableId}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Update table status (OWNER/ADMIN/SERVER Required)
 * Updates table status with validation of state transitions. Valid transitions follow the table lifecycle: VACANT → SEATED → ORDERING → SERVED → READY_TO_PAY → CLEANING → VACANT
 */
export const tableControllerUpdateTableStatus = <
  ThrowOnError extends boolean = false,
>(
  options: Options<TableControllerUpdateTableStatusData, ThrowOnError>
) => {
  return (options.client ?? client).patch<
    TableControllerUpdateTableStatusResponses,
    unknown,
    ThrowOnError
  >({
    url: '/stores/{storeId}/tables/{tableId}/status',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};
