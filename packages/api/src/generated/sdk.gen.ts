// This file is auto-generated by @hey-api/openapi-ts

import {
  type Client,
  formDataBodySerializer,
  type Options as Options2,
  type TDataShape,
} from './client/index.js';
import { client } from './client.gen.js';
import type {
  AuthControllerGetAuth0ConfigData,
  AuthControllerGetAuth0ConfigResponses,
  AuthControllerGetAuth0ProfileData,
  AuthControllerGetAuth0ProfileErrors,
  AuthControllerGetAuth0ProfileResponses,
  AuthControllerLoginWithStoreData,
  AuthControllerLoginWithStoreErrors,
  AuthControllerLoginWithStoreResponses,
  AuthControllerValidateAuth0TokenData,
  AuthControllerValidateAuth0TokenErrors,
  AuthControllerValidateAuth0TokenResponses,
  CategoryControllerCreateData,
  CategoryControllerCreateResponses,
  CategoryControllerFindAllData,
  CategoryControllerFindAllResponses,
  CategoryControllerFindOneData,
  CategoryControllerFindOneResponses,
  CategoryControllerRemoveData,
  CategoryControllerRemoveResponses,
  CategoryControllerSortCategoriesData,
  CategoryControllerSortCategoriesResponses,
  CategoryControllerUpdateData,
  CategoryControllerUpdateResponses,
  HealthControllerHealthCheckData,
  HealthControllerHealthCheckResponses,
  MenuControllerCreateMenuItemData,
  MenuControllerCreateMenuItemResponses,
  MenuControllerDeleteMenuItemData,
  MenuControllerDeleteMenuItemResponses,
  MenuControllerGetMenuItemByIdData,
  MenuControllerGetMenuItemByIdResponses,
  MenuControllerGetStoreMenuItemsData,
  MenuControllerGetStoreMenuItemsResponses,
  MenuControllerUpdateMenuItemData,
  MenuControllerUpdateMenuItemResponses,
  StoreControllerCreateStoreData,
  StoreControllerCreateStoreErrors,
  StoreControllerCreateStoreResponses,
  StoreControllerGetStoreDetailsData,
  StoreControllerGetStoreDetailsErrors,
  StoreControllerGetStoreDetailsResponses,
  StoreControllerInviteOrAssignRoleByEmailData,
  StoreControllerInviteOrAssignRoleByEmailErrors,
  StoreControllerInviteOrAssignRoleByEmailResponses,
  StoreControllerUpdateStoreInformationData,
  StoreControllerUpdateStoreInformationErrors,
  StoreControllerUpdateStoreInformationResponses,
  StoreControllerUpdateStoreSettingsData,
  StoreControllerUpdateStoreSettingsErrors,
  StoreControllerUpdateStoreSettingsResponses,
  TableControllerCreateTableData,
  TableControllerCreateTableResponses,
  TableControllerDeleteTableData,
  TableControllerDeleteTableResponses,
  TableControllerFindAllByStoreData,
  TableControllerFindAllByStoreResponses,
  TableControllerFindOneData,
  TableControllerFindOneResponses,
  TableControllerSyncTablesData,
  TableControllerSyncTablesResponses,
  TableControllerUpdateTableData,
  TableControllerUpdateTableResponses,
  UploadControllerUploadImageData,
  UploadControllerUploadImageErrors,
  UploadControllerUploadImageResponses,
  UserControllerAddUserToStoreData,
  UserControllerAddUserToStoreErrors,
  UserControllerAddUserToStoreResponses,
  UserControllerGetCurrentUserData,
  UserControllerGetCurrentUserResponses,
  UserControllerGetUserStoresData,
  UserControllerGetUserStoresErrors,
  UserControllerGetUserStoresResponses,
  UserControllerRegisterData,
  UserControllerRegisterErrors,
  UserControllerRegisterResponses,
} from './types.gen.js';

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = Options2<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

/**
 * Select a store to complete login
 */
export const authControllerLoginWithStore = <
  ThrowOnError extends boolean = false,
>(
  options: Options<AuthControllerLoginWithStoreData, ThrowOnError>
) => {
  return (options.client ?? client).post<
    AuthControllerLoginWithStoreResponses,
    AuthControllerLoginWithStoreErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/auth/login/store',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Get Auth0 configuration for frontend
 */
export const authControllerGetAuth0Config = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<AuthControllerGetAuth0ConfigData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    AuthControllerGetAuth0ConfigResponses,
    unknown,
    ThrowOnError
  >({
    url: '/auth/auth0/config',
    ...options,
  });
};

/**
 * Validate Auth0 access token and sync user
 */
export const authControllerValidateAuth0Token = <
  ThrowOnError extends boolean = false,
>(
  options: Options<AuthControllerValidateAuth0TokenData, ThrowOnError>
) => {
  return (options.client ?? client).post<
    AuthControllerValidateAuth0TokenResponses,
    AuthControllerValidateAuth0TokenErrors,
    ThrowOnError
  >({
    url: '/auth/auth0/validate',
    ...options,
  });
};

/**
 * Get user profile (Auth0 protected)
 */
export const authControllerGetAuth0Profile = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<AuthControllerGetAuth0ProfileData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    AuthControllerGetAuth0ProfileResponses,
    AuthControllerGetAuth0ProfileErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/auth/auth0/profile',
    ...options,
  });
};

/**
 * Register a new user (sends verification email)
 */
export const userControllerRegister = <ThrowOnError extends boolean = false>(
  options: Options<UserControllerRegisterData, ThrowOnError>
) => {
  return (options.client ?? client).post<
    UserControllerRegisterResponses,
    UserControllerRegisterErrors,
    ThrowOnError
  >({
    url: '/users/register',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Assign a user to a store with a role (Admin/Owner Protected - Example)
 */
export const userControllerAddUserToStore = <
  ThrowOnError extends boolean = false,
>(
  options: Options<UserControllerAddUserToStoreData, ThrowOnError>
) => {
  return (options.client ?? client).post<
    UserControllerAddUserToStoreResponses,
    UserControllerAddUserToStoreErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/users/add-to-store',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Get all store memberships for a specific user (Protected)
 */
export const userControllerGetUserStores = <
  ThrowOnError extends boolean = false,
>(
  options: Options<UserControllerGetUserStoresData, ThrowOnError>
) => {
  return (options.client ?? client).get<
    UserControllerGetUserStoresResponses,
    UserControllerGetUserStoresErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/users/{id}/stores',
    ...options,
  });
};

/**
 * Get current logged-in user profile, optionally scoped to a store
 */
export const userControllerGetCurrentUser = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<UserControllerGetCurrentUserData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    UserControllerGetCurrentUserResponses,
    unknown,
    ThrowOnError
  >({
    url: '/users/me',
    ...options,
  });
};

/**
 * Get all active categories (with items) for a specific store (Public)
 * Retrieves categories for a store using EITHER storeId OR storeSlug query parameter. Query parameters are defined in the GetCategoriesQueryDto schema.
 */
export const categoryControllerFindAll = <ThrowOnError extends boolean = false>(
  options?: Options<CategoryControllerFindAllData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    CategoryControllerFindAllResponses,
    unknown,
    ThrowOnError
  >({
    url: '/categories',
    ...options,
  });
};

/**
 * Create a new category (OWNER/ADMIN Required)
 */
export const categoryControllerCreate = <ThrowOnError extends boolean = false>(
  options: Options<CategoryControllerCreateData, ThrowOnError>
) => {
  return (options.client ?? client).post<
    CategoryControllerCreateResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/categories',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Delete a category (OWNER/ADMIN Required)
 */
export const categoryControllerRemove = <ThrowOnError extends boolean = false>(
  options: Options<CategoryControllerRemoveData, ThrowOnError>
) => {
  return (options.client ?? client).delete<
    CategoryControllerRemoveResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/categories/{id}',
    ...options,
  });
};

/**
 * Get a specific category by ID (Public)
 */
export const categoryControllerFindOne = <ThrowOnError extends boolean = false>(
  options: Options<CategoryControllerFindOneData, ThrowOnError>
) => {
  return (options.client ?? client).get<
    CategoryControllerFindOneResponses,
    unknown,
    ThrowOnError
  >({
    url: '/categories/{id}',
    ...options,
  });
};

/**
 * Update a category name (OWNER/ADMIN Required)
 */
export const categoryControllerUpdate = <ThrowOnError extends boolean = false>(
  options: Options<CategoryControllerUpdateData, ThrowOnError>
) => {
  return (options.client ?? client).patch<
    CategoryControllerUpdateResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/categories/{id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Reorder categories and their menu items (OWNER/ADMIN Required)
 */
export const categoryControllerSortCategories = <
  ThrowOnError extends boolean = false,
>(
  options: Options<CategoryControllerSortCategoriesData, ThrowOnError>
) => {
  return (options.client ?? client).patch<
    CategoryControllerSortCategoriesResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/categories/sort',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Upload an image file
 */
export const uploadControllerUploadImage = <
  ThrowOnError extends boolean = false,
>(
  options: Options<UploadControllerUploadImageData, ThrowOnError>
) => {
  return (options.client ?? client).post<
    UploadControllerUploadImageResponses,
    UploadControllerUploadImageErrors,
    ThrowOnError
  >({
    ...formDataBodySerializer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/upload/image',
    ...options,
    headers: {
      'Content-Type': null,
      ...options.headers,
    },
  });
};

export const healthControllerHealthCheck = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<HealthControllerHealthCheckData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    HealthControllerHealthCheckResponses,
    unknown,
    ThrowOnError
  >({
    url: '/health',
    ...options,
  });
};

/**
 * Get all menu items for a specific store (Public)
 */
export const menuControllerGetStoreMenuItems = <
  ThrowOnError extends boolean = false,
>(
  options: Options<MenuControllerGetStoreMenuItemsData, ThrowOnError>
) => {
  return (options.client ?? client).get<
    MenuControllerGetStoreMenuItemsResponses,
    unknown,
    ThrowOnError
  >({
    url: '/menu-items',
    ...options,
  });
};

/**
 * Create a menu item (OWNER or ADMIN)
 */
export const menuControllerCreateMenuItem = <
  ThrowOnError extends boolean = false,
>(
  options: Options<MenuControllerCreateMenuItemData, ThrowOnError>
) => {
  return (options.client ?? client).post<
    MenuControllerCreateMenuItemResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/menu-items',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Delete a menu item (OWNER or ADMIN)
 */
export const menuControllerDeleteMenuItem = <
  ThrowOnError extends boolean = false,
>(
  options: Options<MenuControllerDeleteMenuItemData, ThrowOnError>
) => {
  return (options.client ?? client).delete<
    MenuControllerDeleteMenuItemResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/menu-items/{id}',
    ...options,
  });
};

/**
 * Get a single menu item by ID (Public)
 */
export const menuControllerGetMenuItemById = <
  ThrowOnError extends boolean = false,
>(
  options: Options<MenuControllerGetMenuItemByIdData, ThrowOnError>
) => {
  return (options.client ?? client).get<
    MenuControllerGetMenuItemByIdResponses,
    unknown,
    ThrowOnError
  >({
    url: '/menu-items/{id}',
    ...options,
  });
};

/**
 * Update a menu item (OWNER or ADMIN)
 */
export const menuControllerUpdateMenuItem = <
  ThrowOnError extends boolean = false,
>(
  options: Options<MenuControllerUpdateMenuItemData, ThrowOnError>
) => {
  return (options.client ?? client).put<
    MenuControllerUpdateMenuItemResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/menu-items/{id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Get public details for a specific store by ID
 */
export const storeControllerGetStoreDetails = <
  ThrowOnError extends boolean = false,
>(
  options: Options<StoreControllerGetStoreDetailsData, ThrowOnError>
) => {
  return (options.client ?? client).get<
    StoreControllerGetStoreDetailsResponses,
    StoreControllerGetStoreDetailsErrors,
    ThrowOnError
  >({
    url: '/stores/{id}',
    ...options,
  });
};

/**
 * Create a store (creator becomes OWNER)
 */
export const storeControllerCreateStore = <
  ThrowOnError extends boolean = false,
>(
  options: Options<StoreControllerCreateStoreData, ThrowOnError>
) => {
  return (options.client ?? client).post<
    StoreControllerCreateStoreResponses,
    StoreControllerCreateStoreErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/stores',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Update a store details (OWNER or ADMIN only)
 */
export const storeControllerUpdateStoreInformation = <
  ThrowOnError extends boolean = false,
>(
  options: Options<StoreControllerUpdateStoreInformationData, ThrowOnError>
) => {
  return (options.client ?? client).put<
    StoreControllerUpdateStoreInformationResponses,
    StoreControllerUpdateStoreInformationErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/stores/{id}/information',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Update store settings (OWNER or ADMIN only)
 */
export const storeControllerUpdateStoreSettings = <
  ThrowOnError extends boolean = false,
>(
  options: Options<StoreControllerUpdateStoreSettingsData, ThrowOnError>
) => {
  return (options.client ?? client).put<
    StoreControllerUpdateStoreSettingsResponses,
    StoreControllerUpdateStoreSettingsErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/stores/{id}/settings',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Invite a new user or assign/update role for an existing user by email (Role permissions apply)
 * Owner can assign any role. Admin can assign STAFF/CHEF roles. If user email doesnt exist, an invite might be implicitly handled by the service (or throw error).
 */
export const storeControllerInviteOrAssignRoleByEmail = <
  ThrowOnError extends boolean = false,
>(
  options: Options<StoreControllerInviteOrAssignRoleByEmailData, ThrowOnError>
) => {
  return (options.client ?? client).post<
    StoreControllerInviteOrAssignRoleByEmailResponses,
    StoreControllerInviteOrAssignRoleByEmailErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/stores/{id}/invite-assign-role',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Get all tables for a specific store (Public)
 */
export const tableControllerFindAllByStore = <
  ThrowOnError extends boolean = false,
>(
  options: Options<TableControllerFindAllByStoreData, ThrowOnError>
) => {
  return (options.client ?? client).get<
    TableControllerFindAllByStoreResponses,
    unknown,
    ThrowOnError
  >({
    url: '/stores/{storeId}/tables',
    ...options,
  });
};

/**
 * Create a new table (OWNER/ADMIN Required)
 */
export const tableControllerCreateTable = <
  ThrowOnError extends boolean = false,
>(
  options: Options<TableControllerCreateTableData, ThrowOnError>
) => {
  return (options.client ?? client).post<
    TableControllerCreateTableResponses,
    unknown,
    ThrowOnError
  >({
    url: '/stores/{storeId}/tables',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Synchronize tables for a store (OWNER/ADMIN Required)
 * Creates/Updates tables based on the input list. Deletes any existing tables for the store that are NOT included in the input list (by ID). Checks for active sessions before deleting.
 */
export const tableControllerSyncTables = <ThrowOnError extends boolean = false>(
  options: Options<TableControllerSyncTablesData, ThrowOnError>
) => {
  return (options.client ?? client).put<
    TableControllerSyncTablesResponses,
    unknown,
    ThrowOnError
  >({
    url: '/stores/{storeId}/tables/batch-sync',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Delete a table (OWNER/ADMIN Required)
 */
export const tableControllerDeleteTable = <
  ThrowOnError extends boolean = false,
>(
  options: Options<TableControllerDeleteTableData, ThrowOnError>
) => {
  return (options.client ?? client).delete<
    TableControllerDeleteTableResponses,
    unknown,
    ThrowOnError
  >({
    url: '/stores/{storeId}/tables/{tableId}',
    ...options,
  });
};

/**
 * Get a specific table by ID (Public)
 */
export const tableControllerFindOne = <ThrowOnError extends boolean = false>(
  options: Options<TableControllerFindOneData, ThrowOnError>
) => {
  return (options.client ?? client).get<
    TableControllerFindOneResponses,
    unknown,
    ThrowOnError
  >({
    url: '/stores/{storeId}/tables/{tableId}',
    ...options,
  });
};

/**
 * Update a table name (OWNER/ADMIN Required)
 */
export const tableControllerUpdateTable = <
  ThrowOnError extends boolean = false,
>(
  options: Options<TableControllerUpdateTableData, ThrowOnError>
) => {
  return (options.client ?? client).patch<
    TableControllerUpdateTableResponses,
    unknown,
    ThrowOnError
  >({
    url: '/stores/{storeId}/tables/{tableId}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};
