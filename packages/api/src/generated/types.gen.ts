// This file is auto-generated by @hey-api/openapi-ts

export type ClientOptions = {
  baseUrl: string;
};

export type LoginDto = {
  /**
   * The user’s email address
   */
  email: string;
  /**
   * The user’s password
   */
  password: string;
};

export type ChooseStoreDto = {
  /**
   * The ID (UUID) of the store the user wants to act under
   */
  storeId: string;
};

export type StandardApiErrorDetails = {
  /**
   * Machine-readable error code identifying the error type (e.g., validation, auth, system error).
   */
  code: string;
  /**
   * A human-readable message specifically describing this error.
   */
  message: string;
  /**
   * Identifies the specific input field related to the error, if applicable (often used for validation errors).
   */
  field?: {
    [key: string]: unknown;
  };
};

export type StandardApiResponse = {
  status: 'success' | 'error';
  /**
   * Response data payload when status is "success".
   */
  data?: {
    [key: string]: unknown;
  };
  /**
   * A general human-readable message about the operation outcome.
   */
  message?: {
    [key: string]: unknown;
  };
  /**
   * Array of error details when status is "error". Usually empty on success.
   */
  errors?: Array<StandardApiErrorDetails>;
};

export type ForgotPasswordDto = {
  email: string;
};

export type ResetPasswordDto = {
  /**
   * Reset token
   */
  token: string;
  newPassword: string;
};

export type ChangePasswordDto = {
  oldPassword: string;
  newPassword: string;
};

export type UserProfileResponseDto = {
  /**
   * User's unique identifier
   */
  id: string;
  /**
   * User's email address
   */
  email: string;
  /**
   * User's display name
   */
  name?: {
    [key: string]: unknown;
  };
  /**
   * Indicates if the user email is verified
   */
  verified: boolean;
  /**
   * User's role in the specific store requested via query parameter (if provided and user is a member)
   */
  selectedStoreRole?: 'OWNER' | 'ADMIN' | 'CHEF' | 'CASHIER' | 'SERVER';
  /**
   * Timestamp when the user was created
   */
  createdAt: string;
};

export type CreateUserDto = {
  email: string;
  password: string;
  name?: string;
};

export type AddUserToStoreDto = {
  userId: string;
  storeId: string;
  role: 'OWNER' | 'ADMIN' | 'CHEF' | 'CASHIER' | 'SERVER';
};

export type MenuItemNestedResponseDto = {
  id: string;
  name: string;
  description?: {
    [key: string]: unknown;
  };
  basePrice?: string;
  imageUrl?: {
    [key: string]: unknown;
  };
  sortOrder: number;
};

export type CategoryResponseDto = {
  id: string;
  name: string;
  storeId: string;
  sortOrder: number;
  createdAt: string;
  updatedAt: string;
};

export type CategoryBasicResponseDto = {
  id: string;
  name: string;
  storeId: string;
  sortOrder: number;
  createdAt: string;
  updatedAt: string;
};

export type CategoryDeletedResponseDto = {
  /**
   * The ID (UUID) of the deleted category.
   */
  id: string;
};

export type CustomizationOptionResponseDto = {
  id: string;
  name: string;
  additionalPrice?: string;
};

export type CustomizationGroupResponseDto = {
  id: string;
  name: string;
  required: boolean;
  minSelectable: number;
  maxSelectable: number;
  menuItemId: string;
  customizationOptions: Array<CustomizationOptionResponseDto>;
  createdAt: string;
  updatedAt: string;
};

export type CreateCategoryDto = {
  name: string;
};

export type SortMenuItemDto = {
  /**
   * Menu item ID (UUID)
   */
  id: string;
  /**
   * Sort order for this menu item
   */
  sortOrder: number;
};

export type SortCategoryDto = {
  /**
   * Category ID (UUID)
   */
  id: string;
  /**
   * Sort order for this category
   */
  sortOrder: number;
  /**
   * List of menu items under this category with updated sort orders
   */
  menuItems: Array<SortMenuItemDto>;
};

export type SortCategoriesPayloadDto = {
  /**
   * Array of categories + associated menu items sort orders
   */
  categories: Array<SortCategoryDto>;
};

export type UpdateCategoryDto = {
  name?: string;
};

export type UploadImageResponseDto = {
  /**
   * The full public URL of the generated medium-sized image.
   */
  imageUrl: string;
};

export type MenuItemDeletedResponseDto = {
  /**
   * The ID (UUID) of the deleted menu item.
   */
  id: string;
};

export type MenuItemResponseDto = {
  id: string;
  name: string;
  description?: {
    [key: string]: unknown;
  };
  /**
   * Base price, formatted as string.
   */
  basePrice: string;
  imageUrl?: {
    [key: string]: unknown;
  };
  /**
   * Indicates if the item is temporarily hidden (e.g., out of stock).
   */
  isHidden: boolean;
  categoryId: string;
  storeId: string;
  sortOrder: number;
  /**
   * Creation timestamp
   */
  createdAt: string;
  /**
   * Last update timestamp
   */
  updatedAt: string;
  category: CategoryResponseDto;
  customizationGroups: Array<CustomizationGroupResponseDto>;
};

export type UpsertCategoryDto = {
  /**
   * ID (UUID) of the option to update. Omit to create a new option within the group.
   */
  id?: string;
  name: string;
};

export type UpsertCustomizationOptionDto = {
  /**
   * ID (UUID) of the option to update. Omit to create a new option within the group.
   */
  id?: string;
  name: string;
  /**
   * Optional: Additional price for this option. Must be zero or positive. Send as string (e.g., "1.50", "0", "0.00"). Defaults to 0 if omitted.
   */
  additionalPrice?: string;
};

export type UpsertCustomizationGroupDto = {
  /**
   * ID (UUID) of the existing group to update.
   */
  id?: string;
  name: string;
  /**
   * Is selecting an option from this group mandatory?
   */
  required?: boolean;
  /**
   * Minimum number of options required if group is required (usually 1 if required=true)
   */
  minSelectable?: number;
  /**
   * Maximum number of options allowed (e.g., 1 for size, >1 for toppings)
   */
  maxSelectable?: number;
  options: Array<UpsertCustomizationOptionDto>;
};

export type CreateMenuItemDto = {
  name: string;
  description?: string;
  /**
   * Base price before customizations
   */
  basePrice: string;
  /**
   * Key for image stored in S3 or similar
   */
  imageUrl?: string;
  /**
   * Set to true to temporarily hide the item (e.g., out of stock). Defaults to false (visible).
   */
  isHidden?: boolean;
  /**
   * Category for the item. Provide ID to link/update existing, or just name to create new.
   */
  category: UpsertCategoryDto;
  /**
   * Optional customization groups (e.g., Size, Spice Level, Add-ons). Omit IDs for new groups/options.
   */
  customizationGroups?: Array<UpsertCustomizationGroupDto>;
};

export type UpdateMenuItemDto = {
  name?: string;
  description?: string;
  /**
   * Base price before customizations
   */
  basePrice: number;
  /**
   * Key for image stored in S3 or similar
   */
  imageUrl?: string;
  /**
   * Set to true to temporarily hide the item (e.g., out of stock). Defaults to false (visible).
   */
  isHidden?: boolean;
  /**
   * Optional: Update or change category. Provide ID to link/update existing, or just name to create new.
   */
  category?: UpsertCategoryDto;
  /**
   * Optional: Full list of desired customization groups. Provide IDs to update existing groups/options. Groups/options missing IDs will be created. Existing groups/options NOT included in this array (by ID) WILL BE DELETED.
   */
  customizationGroups?: Array<UpsertCustomizationGroupDto>;
};

export type StoreInformationResponseDto = {
  id: string;
  storeId: string;
  name: string;
  logoUrl?: {
    [key: string]: unknown;
  };
  address?: {
    [key: string]: unknown;
  };
  phone?: {
    [key: string]: unknown;
  };
  email?: {
    [key: string]: unknown;
  };
  website?: {
    [key: string]: unknown;
  };
  createdAt: string;
  updatedAt: string;
};

export type StoreSettingResponseDto = {
  /**
   * Setting record ID
   */
  id: string;
  /**
   * ID of the associated store
   */
  storeId: string;
  /**
   * Store currency code
   */
  currency: 'THB' | 'MMK' | 'USD' | 'EUR' | 'JPY' | 'CNY' | 'SGD' | 'HKD';
  /**
   * VAT rate (e.g., 0.07 for 7%)
   */
  vatRate?: string;
  /**
   * Service charge rate (e.g., 0.10 for 10%)
   */
  serviceChargeRate?: string;
  createdAt: string;
  updatedAt: string;
};

export type GetStoreDetailsResponseDto = {
  /**
   * Store's unique identifier
   */
  id: string;
  /**
   * Store's unique URL slug
   */
  slug: string;
  information: StoreInformationResponseDto;
  setting: StoreSettingResponseDto;
  createdAt: string;
  updatedAt: string;
};

export type CreateStoreDto = {
  /**
   * Store's display name
   */
  name: string;
};

export type UpdateStoreInformationDto = {
  /**
   * Store's display name
   */
  name: string;
  /**
   * Store's logo URL
   */
  logoUrl?: string;
  /**
   * Store's physical address
   */
  address?: string;
  /**
   * Store's contact phone number
   */
  phone?: string;
  /**
   * Store's contact email address
   */
  email?: string;
  /**
   * Store's website URL
   */
  website?: string;
};

export type UpdateStoreSettingDto = {
  /**
   * Update the default currency for the store.
   */
  currency?: 'THB' | 'MMK' | 'USD' | 'EUR' | 'JPY' | 'CNY' | 'SGD' | 'HKD';
  /**
   * Update the VAT rate. Send as a string (e.g., "0.07" for 7%, "0.125" for 12.5%). Send null or omit to remove/keep unchanged. Must be between "0.000" and "0.999".
   */
  vatRate?: string;
  /**
   * Update the Service Charge rate. Send as a string (e.g., "0.10" for 10%). Send null or omit to remove/keep unchanged. Must be between "0.000" and "0.999".
   */
  serviceChargeRate?: string;
};

export type InviteOrAssignRoleDto = {
  /**
   * The email of the user to invite or assign a role to
   */
  email: string;
  /**
   * The new role for the user in this store
   */
  role: 'OWNER' | 'ADMIN' | 'CHEF' | 'CASHIER' | 'SERVER';
};

export type TableResponseDto = {
  id: string;
  storeId: string;
  name: string;
  createdAt: string;
  updatedAt: string;
};

export type TableDeletedResponseDto = {
  /**
   * ID of the deleted table.
   */
  id: string;
  /**
   * Indicator that the deletion was successful.
   */
  deleted: boolean;
};

export type UpsertTableDto = {
  /**
   * ID (UUID) of the table to update. Omit to create a new table.
   */
  id?: string;
  /**
   * Display name or number for the table (must be unique within the store)
   */
  name: string;
};

export type BatchUpsertTableDto = {
  /**
   * An array of table objects to create or update. Any existing tables for the store NOT included in this list (by ID) will be deleted.
   */
  tables: Array<UpsertTableDto>;
};

export type CreateTableDto = {
  /**
   * Display name or number for the table (unique within the store)
   */
  name: string;
};

export type UpdateTableDto = {
  /**
   * New display name or number for the table (unique within the store)
   */
  name?: string;
};

export type ActiveTableSessionResponseDto = {
  /**
   * Unique ID of the active session record
   */
  id: string;
  /**
   * ID of the associated table
   */
  tableId: string;
  /**
   * ID of the associated store
   */
  storeId: string;
  /**
   * Timestamp when the session started
   */
  createdAt: string;
};

export type JoinSessionResponseDto = {
  message: string;
  /**
   * ID of the joined active session record
   */
  sessionId: string;
  /**
   * ID of the associated table
   */
  tableId: string;
  /**
   * ID of the associated store
   */
  storeId: string;
  /**
   * Slug of the store associated with the session
   */
  storeSlug: string;
};

export type SessionContextDto = {
  /**
   * ID of the active table session associated with the request token.
   */
  sessionId: string;
};

export type MenuItemBasicResponseDto = {
  id: string;
  name: string;
  imageUrl?: {
    [key: string]: unknown;
  };
  basePrice: string;
};

export type CartItemResponseDto = {
  id: string;
  cartId: string;
  quantity: number;
  notes?: {
    [key: string]: unknown;
  };
  menuItem?: MenuItemBasicResponseDto;
  selectedOptions?: Array<CustomizationOptionResponseDto>;
  createdAt: string;
  updatedAt: string;
};

export type CartResponseDto = {
  id: string;
  activeTableSessionId: string;
  items: Array<CartItemResponseDto>;
  createdAt: string;
  updatedAt: string;
};

export type AddItemToCartDto = {
  /**
   * ID (UUID) of the MenuItem being added to the cart.
   */
  menuItemId: string;
  /**
   * Quantity of this menu item configuration being added.
   */
  quantity: number;
  /**
   * Array of IDs (UUIDs) of the chosen CustomizationOptions for this item.
   */
  selectedOptionIds?: Array<string>;
  /**
   * Optional special instructions or notes for this cart item.
   */
  notes?: string;
};

export type UpdateCartItemDto = {
  /**
   * ID (UUID) of the CartItem to update.
   */
  cartItemId: string;
  /**
   * New quantity for the item.
   */
  quantity?: number;
  /**
   * Updated special instructions or notes. Send null to clear.
   */
  notes?: {
    [key: string]: unknown;
  };
};

export type AuthControllerLoginData = {
  body: LoginDto;
  path?: never;
  query?: never;
  url: '/auth/login';
};

export type AuthControllerLoginErrors = {
  /**
   * Invalid credentials or email not verified.
   */
  401: unknown;
};

export type AuthControllerLoginResponses = {
  /**
   * Login successful (Step 1). Basic JWT set in HttpOnly cookie. Token only contains { sub: userId }.
   */
  200: unknown;
};

export type AuthControllerLoginWithStoreData = {
  body: ChooseStoreDto;
  path?: never;
  query?: never;
  url: '/auth/login/store';
};

export type AuthControllerLoginWithStoreErrors = {
  /**
   * Invalid/Expired Token or User not member of store.
   */
  401: unknown;
  /**
   * User/Membership data not found (should be rare).
   */
  404: unknown;
};

export type AuthControllerLoginWithStoreResponses = {
  /**
   * Store selected. Full JWT set in HttpOnly cookie. Token contains { sub, storeId, role }.
   */
  200: StandardApiResponse;
};

export type AuthControllerLoginWithStoreResponse =
  AuthControllerLoginWithStoreResponses[keyof AuthControllerLoginWithStoreResponses];

export type AuthControllerVerifyData = {
  body?: never;
  path?: never;
  query: {
    /**
     * Verification token
     */
    token: string;
  };
  url: '/auth/verify';
};

export type AuthControllerVerifyErrors = {
  /**
   * Missing, invalid, or expired token.
   */
  400: unknown;
};

export type AuthControllerVerifyResponses = {
  /**
   * Email verified successfully.
   */
  200: StandardApiResponse;
};

export type AuthControllerVerifyResponse =
  AuthControllerVerifyResponses[keyof AuthControllerVerifyResponses];

export type AuthControllerForgotPasswordData = {
  body: ForgotPasswordDto;
  path?: never;
  query?: never;
  url: '/auth/forgot-password';
};

export type AuthControllerForgotPasswordErrors = {
  /**
   * Invalid request body.
   */
  400: unknown;
  /**
   * Failed to initiate password reset process.
   */
  500: unknown;
};

export type AuthControllerForgotPasswordResponses = {
  /**
   * If the email exists, a reset token is generated and an email is queued.
   */
  200: StandardApiResponse;
};

export type AuthControllerForgotPasswordResponse =
  AuthControllerForgotPasswordResponses[keyof AuthControllerForgotPasswordResponses];

export type AuthControllerResetPasswordData = {
  body: ResetPasswordDto;
  path?: never;
  query?: never;
  url: '/auth/reset-password';
};

export type AuthControllerResetPasswordErrors = {
  /**
   * Invalid/expired token or validation errors.
   */
  400: unknown;
  /**
   * Internal error during password reset.
   */
  500: unknown;
};

export type AuthControllerResetPasswordResponses = {
  /**
   * Password reset successful.
   */
  200: StandardApiResponse;
};

export type AuthControllerResetPasswordResponse =
  AuthControllerResetPasswordResponses[keyof AuthControllerResetPasswordResponses];

export type AuthControllerChangePasswordData = {
  body: ChangePasswordDto;
  path?: never;
  query?: never;
  url: '/auth/change-password';
};

export type AuthControllerChangePasswordErrors = {
  /**
   * Validation errors (e.g., new password same as old).
   */
  400: unknown;
  /**
   * Invalid old password.
   */
  401: unknown;
  /**
   * User not found (should not happen with valid JWT).
   */
  404: unknown;
  /**
   * Internal error during password change.
   */
  500: unknown;
};

export type AuthControllerChangePasswordResponses = {
  /**
   * Password changed successfully.
   */
  200: StandardApiResponse;
};

export type AuthControllerChangePasswordResponse =
  AuthControllerChangePasswordResponses[keyof AuthControllerChangePasswordResponses];

export type UserControllerRegisterData = {
  body: CreateUserDto;
  path?: never;
  query?: never;
  url: '/users/register';
};

export type UserControllerRegisterErrors = {
  /**
   * Validation error (e.g., email exists, disposable domain, invalid input)
   */
  400: unknown;
  /**
   * Internal server error (e.g., failed to send email)
   */
  500: unknown;
};

export type UserControllerRegisterResponses = {
  /**
   * User registered successfully. Verification email sent.
   */
  201: StandardApiResponse;
};

export type UserControllerRegisterResponse =
  UserControllerRegisterResponses[keyof UserControllerRegisterResponses];

export type UserControllerAddUserToStoreData = {
  body: AddUserToStoreDto;
  path?: never;
  query?: never;
  url: '/users/add-to-store';
};

export type UserControllerAddUserToStoreErrors = {
  /**
   * Validation error (e.g., invalid role, missing fields)
   */
  400: unknown;
  /**
   * User does not have permission to perform this action.
   */
  403: unknown;
  /**
   * User or Store not found.
   */
  404: unknown;
};

export type UserControllerAddUserToStoreResponses = {
  /**
   * User assigned/updated in store successfully.
   */
  200: StandardApiResponse;
};

export type UserControllerAddUserToStoreResponse =
  UserControllerAddUserToStoreResponses[keyof UserControllerAddUserToStoreResponses];

export type UserControllerGetUserStoresData = {
  body?: never;
  path: {
    /**
     * ID (UUID) of the target user
     */
    id: string;
  };
  query?: never;
  url: '/users/{id}/stores';
};

export type UserControllerGetUserStoresErrors = {
  /**
   * User does not have permission to view this.
   */
  403: unknown;
  /**
   * Target user not found.
   */
  404: unknown;
};

export type UserControllerGetUserStoresResponses = {
  /**
   * List of user store memberships retrieved.
   */
  200: StandardApiResponse;
};

export type UserControllerGetUserStoresResponse =
  UserControllerGetUserStoresResponses[keyof UserControllerGetUserStoresResponses];

export type UserControllerGetCurrentUserData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Optional: ID (UUID) of the store to get user context (e.g., role) for.
     */
    storeId?: string;
  };
  url: '/users/me';
};

export type UserControllerGetCurrentUserResponses = {
  /**
   * Current user profile retrieved successfully.
   */
  200: StandardApiResponse & {
    status?: string;
    data?: UserProfileResponseDto;
    errors?: Array<unknown>;
    message?: string;
  };
};

export type UserControllerGetCurrentUserResponse =
  UserControllerGetCurrentUserResponses[keyof UserControllerGetCurrentUserResponses];

export type CategoryControllerFindAllData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * ID (UUID) of the store (use this OR storeSlug).
     */
    storeId?: string;
    /**
     * URL Slug of the store (use this OR storeId).
     */
    storeSlug?: string;
  };
  url: '/categories';
};

export type CategoryControllerFindAllResponses = {
  /**
   * List of active categories with included active menu items.
   */
  200: StandardApiResponse & {
    status?: string;
    data?: Array<CategoryResponseDto>;
    errors?: Array<unknown>;
    message?: string;
  };
};

export type CategoryControllerFindAllResponse =
  CategoryControllerFindAllResponses[keyof CategoryControllerFindAllResponses];

export type CategoryControllerCreateData = {
  body: CreateCategoryDto;
  path?: never;
  query: {
    storeId: string;
  };
  url: '/categories';
};

export type CategoryControllerCreateResponses = {
  /**
   * Category created successfully.
   */
  201: StandardApiResponse & {
    status?: string;
    data?: CategoryBasicResponseDto;
    errors?: Array<unknown>;
    message?: string;
  };
};

export type CategoryControllerCreateResponse =
  CategoryControllerCreateResponses[keyof CategoryControllerCreateResponses];

export type CategoryControllerRemoveData = {
  body?: never;
  path: {
    /**
     * ID (UUID) of the category to delete
     */
    id: string;
  };
  query: {
    storeId: string;
  };
  url: '/categories/{id}';
};

export type CategoryControllerRemoveResponses = {
  /**
   * Category deleted successfully.
   */
  200: StandardApiResponse & {
    status?: string;
    data?: CategoryDeletedResponseDto;
    errors?: Array<unknown>;
    message?: string;
  };
};

export type CategoryControllerRemoveResponse =
  CategoryControllerRemoveResponses[keyof CategoryControllerRemoveResponses];

export type CategoryControllerFindOneData = {
  body?: never;
  path: {
    /**
     * ID (UUID) of the category to fetch
     */
    id: string;
  };
  query: {
    /**
     * ID (UUID) of the store this category belongs to
     */
    storeId: string;
  };
  url: '/categories/{id}';
};

export type CategoryControllerFindOneResponses = {
  200: unknown;
};

export type CategoryControllerUpdateData = {
  body: UpdateCategoryDto;
  path: {
    /**
     * ID (UUID) of the category to update
     */
    id: string;
  };
  query: {
    storeId: string;
  };
  url: '/categories/{id}';
};

export type CategoryControllerUpdateResponses = {
  /**
   * Category updated successfully.
   */
  200: StandardApiResponse & {
    status?: string;
    data?: CategoryBasicResponseDto;
    errors?: Array<unknown>;
    message?: string;
  };
};

export type CategoryControllerUpdateResponse =
  CategoryControllerUpdateResponses[keyof CategoryControllerUpdateResponses];

export type CategoryControllerSortCategoriesData = {
  body: SortCategoriesPayloadDto;
  path?: never;
  query: {
    storeId: string;
  };
  url: '/categories/sort';
};

export type CategoryControllerSortCategoriesResponses = {
  /**
   * Categories and items reordered successfully.
   */
  200: StandardApiResponse & {
    status?: string;
    data?: string;
    errors?: Array<unknown>;
    message?: string;
  };
};

export type CategoryControllerSortCategoriesResponse =
  CategoryControllerSortCategoriesResponses[keyof CategoryControllerSortCategoriesResponses];

export type UploadControllerUploadImageData = {
  /**
   * Image file to upload (jpg, jpeg, png, webp)
   */
  body: {
    file?: Blob | File;
  };
  path?: never;
  query?: never;
  url: '/upload/image';
};

export type UploadControllerUploadImageErrors = {
  /**
   * Unauthorized.
   */
  401: unknown;
};

export type UploadControllerUploadImageResponses = {
  /**
   * Image uploaded successfully
   */
  200: StandardApiResponse & {
    status?: string;
    data?: UploadImageResponseDto;
    errors?: Array<unknown>;
    message?: string;
  };
};

export type UploadControllerUploadImageResponse =
  UploadControllerUploadImageResponses[keyof UploadControllerUploadImageResponses];

export type HealthControllerHealthCheckData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/health';
};

export type HealthControllerHealthCheckResponses = {
  200: unknown;
};

export type MenuControllerGetStoreMenuItemsData = {
  body?: never;
  path?: never;
  query: {
    /**
     * ID (UUID) of the store whose menu items to fetch
     */
    storeId: string;
  };
  url: '/menu-items';
};

export type MenuControllerGetStoreMenuItemsResponses = {
  /**
   * List of menu items retrieved successfully.
   */
  200: StandardApiResponse & {
    status?: string;
    data?: Array<MenuItemResponseDto>;
    errors?: Array<unknown>;
    message?: string;
  };
};

export type MenuControllerGetStoreMenuItemsResponse =
  MenuControllerGetStoreMenuItemsResponses[keyof MenuControllerGetStoreMenuItemsResponses];

export type MenuControllerCreateMenuItemData = {
  body: CreateMenuItemDto;
  path?: never;
  query: {
    storeId: string;
  };
  url: '/menu-items';
};

export type MenuControllerCreateMenuItemResponses = {
  /**
   * Menu item created successfully.
   */
  201: StandardApiResponse & {
    status?: string;
    data?: string;
    errors?: Array<unknown>;
    message?: string;
  };
};

export type MenuControllerCreateMenuItemResponse =
  MenuControllerCreateMenuItemResponses[keyof MenuControllerCreateMenuItemResponses];

export type MenuControllerDeleteMenuItemData = {
  body?: never;
  path: {
    id: string;
  };
  query: {
    storeId: string;
  };
  url: '/menu-items/{id}';
};

export type MenuControllerDeleteMenuItemResponses = {
  /**
   * Menu item deleted successfully.
   */
  200: StandardApiResponse & {
    status?: string;
    data?: MenuItemDeletedResponseDto;
    errors?: Array<unknown>;
    message?: string;
  };
};

export type MenuControllerDeleteMenuItemResponse =
  MenuControllerDeleteMenuItemResponses[keyof MenuControllerDeleteMenuItemResponses];

export type MenuControllerGetMenuItemByIdData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: '/menu-items/{id}';
};

export type MenuControllerGetMenuItemByIdResponses = {
  /**
   * Menu item details retrieved successfully.
   */
  200: StandardApiResponse & {
    status?: string;
    data?: MenuItemResponseDto;
    errors?: Array<unknown>;
    message?: string;
  };
};

export type MenuControllerGetMenuItemByIdResponse =
  MenuControllerGetMenuItemByIdResponses[keyof MenuControllerGetMenuItemByIdResponses];

export type MenuControllerUpdateMenuItemData = {
  body: UpdateMenuItemDto;
  path: {
    id: string;
  };
  query: {
    storeId: string;
  };
  url: '/menu-items/{id}';
};

export type MenuControllerUpdateMenuItemResponses = {
  /**
   * Menu item updated successfully.
   */
  200: StandardApiResponse & {
    status?: string;
    data?: MenuItemResponseDto;
    errors?: Array<unknown>;
    message?: string;
  };
};

export type MenuControllerUpdateMenuItemResponse =
  MenuControllerUpdateMenuItemResponses[keyof MenuControllerUpdateMenuItemResponses];

export type StoreControllerGetStoreDetailsData = {
  body?: never;
  path: {
    /**
     * ID (UUID) of the store to retrieve
     */
    id: string;
  };
  query?: never;
  url: '/stores/{id}';
};

export type StoreControllerGetStoreDetailsErrors = {
  /**
   * Store not found.
   */
  404: unknown;
};

export type StoreControllerGetStoreDetailsResponses = {
  /**
   * Store details retrieved successfully.
   */
  200: StandardApiResponse & {
    status?: string;
    data?: GetStoreDetailsResponseDto;
    errors?: Array<unknown>;
    message?: string;
  };
};

export type StoreControllerGetStoreDetailsResponse =
  StoreControllerGetStoreDetailsResponses[keyof StoreControllerGetStoreDetailsResponses];

export type StoreControllerCreateStoreData = {
  body: CreateStoreDto;
  path?: never;
  query?: never;
  url: '/stores';
};

export type StoreControllerCreateStoreErrors = {
  /**
   * Unauthorized - Invalid or missing JWT.
   */
  401: unknown;
};

export type StoreControllerCreateStoreResponses = {
  /**
   * Store created successfully.
   */
  201: StandardApiResponse & {
    status?: string;
    data?: string;
    errors?: Array<unknown>;
    message?: string;
  };
};

export type StoreControllerCreateStoreResponse =
  StoreControllerCreateStoreResponses[keyof StoreControllerCreateStoreResponses];

export type StoreControllerUpdateStoreInformationData = {
  body: UpdateStoreInformationDto;
  path?: never;
  query: {
    storeId: string;
  };
  url: '/stores/{id}/information';
};

export type StoreControllerUpdateStoreInformationErrors = {
  /**
   * Unauthorized - Invalid or missing JWT.
   */
  401: unknown;
};

export type StoreControllerUpdateStoreInformationResponses = {
  /**
   * Store updated successfully.
   */
  200: StandardApiResponse;
};

export type StoreControllerUpdateStoreInformationResponse =
  StoreControllerUpdateStoreInformationResponses[keyof StoreControllerUpdateStoreInformationResponses];

export type StoreControllerUpdateStoreSettingsData = {
  body: UpdateStoreSettingDto;
  path: {
    /**
     * ID (UUID) of the store whose settings to update
     */
    id: string;
  };
  query?: never;
  url: '/stores/{id}/settings';
};

export type StoreControllerUpdateStoreSettingsErrors = {
  /**
   * Unauthorized - Invalid or missing JWT.
   */
  401: unknown;
};

export type StoreControllerUpdateStoreSettingsResponses = {
  /**
   * Store settings updated successfully.
   */
  200: StandardApiResponse & {
    status?: string;
    data?: StoreSettingResponseDto;
    errors?: Array<unknown>;
    message?: string;
  };
};

export type StoreControllerUpdateStoreSettingsResponse =
  StoreControllerUpdateStoreSettingsResponses[keyof StoreControllerUpdateStoreSettingsResponses];

export type StoreControllerInviteOrAssignRoleByEmailData = {
  body: InviteOrAssignRoleDto;
  path?: never;
  query: {
    storeId: string;
  };
  url: '/stores/{id}/invite-assign-role';
};

export type StoreControllerInviteOrAssignRoleByEmailErrors = {
  /**
   * Unauthorized - Invalid or missing JWT.
   */
  401: unknown;
  /**
   * Store not found.
   */
  404: unknown;
};

export type StoreControllerInviteOrAssignRoleByEmailResponses = {
  /**
   * Role assigned successfully.
   */
  200: StandardApiResponse & {
    status?: string;
    data?: string;
    errors?: Array<unknown>;
    message?: string;
  };
};

export type StoreControllerInviteOrAssignRoleByEmailResponse =
  StoreControllerInviteOrAssignRoleByEmailResponses[keyof StoreControllerInviteOrAssignRoleByEmailResponses];

export type TableControllerFindAllByStoreData = {
  body?: never;
  path: {
    /**
     * ID (UUID) of the store
     */
    storeId: string;
  };
  query?: never;
  url: '/stores/{storeId}/tables';
};

export type TableControllerFindAllByStoreResponses = {
  /**
   * List of tables for the store, naturally sorted by name.
   */
  200: StandardApiResponse & {
    status?: string;
    data?: Array<TableResponseDto>;
    errors?: Array<unknown>;
    message?: string;
  };
};

export type TableControllerFindAllByStoreResponse =
  TableControllerFindAllByStoreResponses[keyof TableControllerFindAllByStoreResponses];

export type TableControllerCreateTableData = {
  body: CreateTableDto;
  path: {
    /**
     * ID (UUID) of the store
     */
    storeId: string;
  };
  query?: never;
  url: '/stores/{storeId}/tables';
};

export type TableControllerCreateTableResponses = {
  /**
   * Table created successfully.
   */
  201: StandardApiResponse & {
    status?: string;
    data?: TableResponseDto;
    errors?: Array<unknown>;
    message?: string;
  };
};

export type TableControllerCreateTableResponse =
  TableControllerCreateTableResponses[keyof TableControllerCreateTableResponses];

export type TableControllerSyncTablesData = {
  body: BatchUpsertTableDto;
  path: {
    /**
     * ID (UUID) of the store
     */
    storeId: string;
  };
  query?: never;
  url: '/stores/{storeId}/tables/batch-sync';
};

export type TableControllerSyncTablesResponses = {
  /**
   * Tables synchronized successfully. Returns the final list of tables for the store.
   */
  200: StandardApiResponse & {
    status?: string;
    data?: Array<TableResponseDto>;
    errors?: Array<unknown>;
    message?: string;
  };
};

export type TableControllerSyncTablesResponse =
  TableControllerSyncTablesResponses[keyof TableControllerSyncTablesResponses];

export type TableControllerDeleteTableData = {
  body?: never;
  path: {
    /**
     * ID (UUID) of the store
     */
    storeId: string;
    /**
     * ID (UUID) of the table to delete
     */
    tableId: string;
  };
  query?: never;
  url: '/stores/{storeId}/tables/{tableId}';
};

export type TableControllerDeleteTableResponses = {
  /**
   * Table deleted successfully.
   */
  200: StandardApiResponse & {
    status?: string;
    data?: TableDeletedResponseDto;
    errors?: Array<unknown>;
    message?: string;
  };
};

export type TableControllerDeleteTableResponse =
  TableControllerDeleteTableResponses[keyof TableControllerDeleteTableResponses];

export type TableControllerFindOneData = {
  body?: never;
  path: {
    /**
     * ID (UUID) of the store
     */
    storeId: string;
    /**
     * ID (UUID) of the table
     */
    tableId: string;
  };
  query?: never;
  url: '/stores/{storeId}/tables/{tableId}';
};

export type TableControllerFindOneResponses = {
  /**
   * Table details retrieved successfully.
   */
  200: StandardApiResponse & {
    status?: string;
    data?: TableResponseDto;
    errors?: Array<unknown>;
    message?: string;
  };
};

export type TableControllerFindOneResponse =
  TableControllerFindOneResponses[keyof TableControllerFindOneResponses];

export type TableControllerUpdateTableData = {
  body: UpdateTableDto;
  path: {
    /**
     * ID (UUID) of the store
     */
    storeId: string;
    /**
     * ID (UUID) of the table to update
     */
    tableId: string;
  };
  query?: never;
  url: '/stores/{storeId}/tables/{tableId}';
};

export type TableControllerUpdateTableResponses = {
  /**
   * Table updated successfully.
   */
  200: StandardApiResponse & {
    status?: string;
    data?: TableResponseDto;
    errors?: Array<unknown>;
    message?: string;
  };
};

export type TableControllerUpdateTableResponse =
  TableControllerUpdateTableResponses[keyof TableControllerUpdateTableResponses];

export type ActiveTableSessionControllerCreateSessionData = {
  body?: never;
  path: {
    /**
     * ID of the store containing the table
     */
    storeId: string;
    /**
     * ID of the table to start the session for
     */
    tableId: string;
  };
  query?: never;
  url: '/stores/{storeId}/tables/{tableId}/sessions';
};

export type ActiveTableSessionControllerCreateSessionResponses = {
  /**
   * Session created successfully.
   */
  201: StandardApiResponse & {
    status?: string;
    data?: ActiveTableSessionResponseDto;
    errors?: Array<unknown>;
    message?: string;
  };
};

export type ActiveTableSessionControllerCreateSessionResponse =
  ActiveTableSessionControllerCreateSessionResponses[keyof ActiveTableSessionControllerCreateSessionResponses];

export type ActiveTableSessionControllerJoinSessionByTableData = {
  body?: never;
  path: {
    /**
     * The unique ID of the table to join (from QR code/NFC)
     */
    tableId: string;
  };
  query?: never;
  url: '/tables/{tableId}/join-session';
};

export type ActiveTableSessionControllerJoinSessionByTableResponses = {
  /**
   * Session joined. Session token set in HttpOnly cookie.
   */
  200: StandardApiResponse & {
    status?: string;
    data?: JoinSessionResponseDto;
    errors?: Array<unknown>;
    message?: string;
  };
};

export type ActiveTableSessionControllerJoinSessionByTableResponse =
  ActiveTableSessionControllerJoinSessionByTableResponses[keyof ActiveTableSessionControllerJoinSessionByTableResponses];

export type ActiveTableSessionControllerGetCurrentSessionContextData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/sessions/my-context';
};

export type ActiveTableSessionControllerGetCurrentSessionContextErrors = {
  /**
   * Missing, invalid, or expired session cookie.
   */
  401: StandardApiResponse;
};

export type ActiveTableSessionControllerGetCurrentSessionContextError =
  ActiveTableSessionControllerGetCurrentSessionContextErrors[keyof ActiveTableSessionControllerGetCurrentSessionContextErrors];

export type ActiveTableSessionControllerGetCurrentSessionContextResponses = {
  /**
   * Session context retrieved.
   */
  200: StandardApiResponse & {
    status?: string;
    data?: SessionContextDto;
    errors?: Array<unknown>;
    message?: string;
  };
};

export type ActiveTableSessionControllerGetCurrentSessionContextResponse =
  ActiveTableSessionControllerGetCurrentSessionContextResponses[keyof ActiveTableSessionControllerGetCurrentSessionContextResponses];

export type CartControllerClearCartData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/sessions/my-cart';
};

export type CartControllerClearCartErrors = {
  /**
   * Missing, invalid, or expired session cookie.
   */
  401: StandardApiResponse;
  /**
   * Session or Cart not found.
   */
  404: StandardApiResponse;
};

export type CartControllerClearCartError =
  CartControllerClearCartErrors[keyof CartControllerClearCartErrors];

export type CartControllerClearCartResponses = {
  /**
   * Cart cleared successfully. Returns empty cart.
   */
  200: StandardApiResponse & {
    status?: string;
    data?: CartResponseDto;
    errors?: Array<unknown>;
    message?: string;
  };
};

export type CartControllerClearCartResponse =
  CartControllerClearCartResponses[keyof CartControllerClearCartResponses];

export type CartControllerGetMyCartData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/sessions/my-cart';
};

export type CartControllerGetMyCartErrors = {
  /**
   * Missing, invalid, or expired session cookie.
   */
  401: StandardApiResponse;
  /**
   * Cart or session not found.
   */
  404: StandardApiResponse;
};

export type CartControllerGetMyCartError =
  CartControllerGetMyCartErrors[keyof CartControllerGetMyCartErrors];

export type CartControllerGetMyCartResponses = {
  /**
   * Cart retrieved successfully.
   */
  200: StandardApiResponse & {
    status?: string;
    data?: CartResponseDto;
    errors?: Array<unknown>;
    message?: string;
  };
};

export type CartControllerGetMyCartResponse =
  CartControllerGetMyCartResponses[keyof CartControllerGetMyCartResponses];

export type CartControllerAddItemData = {
  body: AddItemToCartDto;
  path?: never;
  query?: never;
  url: '/sessions/my-cart/items';
};

export type CartControllerAddItemErrors = {
  /**
   * Invalid item data (e.g., bad menu item ID, invalid options).
   */
  400: StandardApiResponse;
  /**
   * Missing, invalid, or expired session cookie.
   */
  401: StandardApiResponse;
  /**
   * Session or Menu Item not found.
   */
  404: StandardApiResponse;
};

export type CartControllerAddItemError =
  CartControllerAddItemErrors[keyof CartControllerAddItemErrors];

export type CartControllerAddItemResponses = {
  /**
   * Item added successfully. Returns updated cart.
   */
  200: StandardApiResponse & {
    status?: string;
    data?: CartResponseDto;
    errors?: Array<unknown>;
    message?: string;
  };
};

export type CartControllerAddItemResponse =
  CartControllerAddItemResponses[keyof CartControllerAddItemResponses];

export type CartControllerRemoveItemData = {
  body?: never;
  path: {
    /**
     * ID of the CartItem to remove
     */
    cartItemId: string;
  };
  query?: never;
  url: '/sessions/my-cart/items/{cartItemId}';
};

export type CartControllerRemoveItemErrors = {
  /**
   * Missing, invalid, or expired session cookie.
   */
  401: StandardApiResponse;
  /**
   * Session or Cart Item not found.
   */
  404: StandardApiResponse;
};

export type CartControllerRemoveItemError =
  CartControllerRemoveItemErrors[keyof CartControllerRemoveItemErrors];

export type CartControllerRemoveItemResponses = {
  /**
   * Item removed successfully. Returns updated cart.
   */
  200: StandardApiResponse & {
    status?: string;
    data?: CartResponseDto;
    errors?: Array<unknown>;
    message?: string;
  };
};

export type CartControllerRemoveItemResponse =
  CartControllerRemoveItemResponses[keyof CartControllerRemoveItemResponses];

export type CartControllerUpdateItemData = {
  body: UpdateCartItemDto;
  path: {
    /**
     * ID of the CartItem to update
     */
    cartItemId: string;
  };
  query?: never;
  url: '/sessions/my-cart/items/{cartItemId}';
};

export type CartControllerUpdateItemErrors = {
  /**
   * Invalid input (e.g., quantity < 1).
   */
  400: StandardApiResponse;
  /**
   * Missing, invalid, or expired session cookie.
   */
  401: StandardApiResponse;
  /**
   * Session or Cart Item not found.
   */
  404: StandardApiResponse;
};

export type CartControllerUpdateItemError =
  CartControllerUpdateItemErrors[keyof CartControllerUpdateItemErrors];

export type CartControllerUpdateItemResponses = {
  /**
   * Cart item updated successfully. Returns updated cart.
   */
  200: StandardApiResponse & {
    status?: string;
    data?: CartResponseDto;
    errors?: Array<unknown>;
    message?: string;
  };
};

export type CartControllerUpdateItemResponse =
  CartControllerUpdateItemResponses[keyof CartControllerUpdateItemResponses];
