// This file is auto-generated by @hey-api/openapi-ts

export type ClientOptions = {
  baseUrl: string;
};

export type CreateManualSessionDto = {
  /**
   * Type of manual session (COUNTER, PHONE, or TAKEOUT)
   */
  sessionType: 'TABLE' | 'COUNTER' | 'PHONE' | 'TAKEOUT';
  /**
   * Optional customer name
   */
  customerName?: string;
  /**
   * Optional customer phone number
   */
  customerPhone?: string;
  /**
   * Number of guests in the session
   */
  guestCount?: number;
};

export type SessionResponseDto = {
  /**
   * Session ID
   */
  id: string;
  /**
   * Store ID
   */
  storeId: string;
  /**
   * Table ID
   */
  tableId: string;
  /**
   * Session status
   */
  status: 'ACTIVE' | 'CLOSED';
  /**
   * Number of guests
   */
  guestCount: number;
  /**
   * Session token for authentication
   */
  sessionToken: string;
  /**
   * Closed timestamp
   */
  closedAt: {
    [key: string]: unknown;
  };
  /**
   * Created timestamp
   */
  createdAt: string;
  /**
   * Updated timestamp
   */
  updatedAt: string;
};

export type JoinSessionDto = {
  /**
   * Number of guests in the session
   */
  guestCount?: number;
};

export type UpdateSessionDto = {
  /**
   * Number of guests in the session
   */
  guestCount?: number;
  /**
   * Session status
   */
  status?: 'ACTIVE' | 'CLOSED';
};

export type ChooseStoreDto = {
  /**
   * The ID (UUID) of the store the user wants to act under
   */
  storeId: string;
};

export type StandardApiErrorDetails = {
  /**
   * Machine-readable error code identifying the error type (e.g., validation, auth, system error).
   */
  code: string;
  /**
   * A human-readable message specifically describing this error.
   */
  message: string;
  /**
   * Identifies the specific input field related to the error, if applicable (often used for validation errors).
   */
  field?: {
    [key: string]: unknown;
  };
};

export type StandardApiResponse = {
  status: 'success' | 'error';
  /**
   * Response data payload when status is "success".
   */
  data?: {
    [key: string]: unknown;
  };
  /**
   * A general human-readable message about the operation outcome.
   */
  message?: {
    [key: string]: unknown;
  };
  /**
   * Array of error details when status is "error". Usually empty on success.
   */
  errors?: Array<StandardApiErrorDetails>;
};

export type UserProfileResponseDto = {
  /**
   * User's unique identifier
   */
  id: string;
  /**
   * User's email address
   */
  email: string;
  /**
   * User's display name
   */
  name?: {
    [key: string]: unknown;
  };
  /**
   * Indicates if the user email is verified
   */
  verified: boolean;
  /**
   * User's role in the specific store requested via query parameter (if provided and user is a member)
   */
  selectedStoreRole?: 'OWNER' | 'ADMIN' | 'CHEF' | 'CASHIER' | 'SERVER';
  /**
   * Timestamp when the user was created
   */
  createdAt: string;
};

export type CreateUserDto = {
  email: string;
  name?: string;
};

export type AddUserToStoreDto = {
  userId: string;
  storeId: string;
  role: 'OWNER' | 'ADMIN' | 'CHEF' | 'CASHIER' | 'SERVER';
};

export type CartItemCustomizationResponseDto = {
  id: string;
  customizationOptionId: string;
  optionName: string;
  additionalPrice: string;
};

export type CartItemResponseDto = {
  id: string;
  menuItemId: {
    [key: string]: unknown;
  };
  menuItemName: string;
  basePrice: string;
  quantity: number;
  notes: {
    [key: string]: unknown;
  };
  customizations: Array<CartItemCustomizationResponseDto>;
  createdAt: string;
  updatedAt: string;
};

export type CartResponseDto = {
  id: string;
  sessionId: string;
  storeId: string;
  subTotal: string;
  items: Array<CartItemResponseDto>;
  createdAt: string;
  updatedAt: string;
};

export type CartItemCustomizationDto = {
  /**
   * Customization option ID
   */
  customizationOptionId: string;
};

export type AddToCartDto = {
  /**
   * Menu item ID to add to cart
   */
  menuItemId: string;
  /**
   * Quantity of the item
   */
  quantity: number;
  /**
   * Special instructions or notes
   */
  notes?: string;
  /**
   * Selected customization options
   */
  customizations?: Array<CartItemCustomizationDto>;
};

export type UpdateCartItemDto = {
  /**
   * Updated quantity
   */
  quantity?: number;
  /**
   * Updated notes
   */
  notes?: string;
};

export type MenuItemNestedResponseDto = {
  id: string;
  name: string;
  description?: {
    [key: string]: unknown;
  };
  basePrice?: string;
  imageUrl?: {
    [key: string]: unknown;
  };
  sortOrder: number;
};

export type CategoryResponseDto = {
  id: string;
  name: string;
  storeId: string;
  sortOrder: number;
  createdAt: string;
  updatedAt: string;
};

export type CategoryBasicResponseDto = {
  id: string;
  name: string;
  storeId: string;
  sortOrder: number;
  createdAt: string;
  updatedAt: string;
};

export type CategoryDeletedResponseDto = {
  /**
   * The ID (UUID) of the deleted category.
   */
  id: string;
};

export type CustomizationOptionResponseDto = {
  id: string;
  name: string;
  additionalPrice?: string;
};

export type CustomizationGroupResponseDto = {
  id: string;
  name: string;
  required: boolean;
  minSelectable: number;
  maxSelectable: number;
  menuItemId: string;
  customizationOptions: Array<CustomizationOptionResponseDto>;
  createdAt: string;
  updatedAt: string;
};

export type CreateCategoryDto = {
  name: string;
};

export type SortMenuItemDto = {
  /**
   * Menu item ID (UUID)
   */
  id: string;
  /**
   * Sort order for this menu item
   */
  sortOrder: number;
};

export type SortCategoryDto = {
  /**
   * Category ID (UUID)
   */
  id: string;
  /**
   * Sort order for this category
   */
  sortOrder: number;
  /**
   * List of menu items under this category with updated sort orders
   */
  menuItems: Array<SortMenuItemDto>;
};

export type SortCategoriesPayloadDto = {
  /**
   * Array of categories + associated menu items sort orders
   */
  categories: Array<SortCategoryDto>;
};

export type UpdateCategoryDto = {
  name?: string;
};

export type UploadImageResponseDto = {
  /**
   * The full public URL of the generated medium-sized image.
   */
  imageUrl: string;
};

export type KitchenOrderResponseDto = {
  /**
   * Order ID
   */
  id: string;
  /**
   * Store ID
   */
  storeId: string;
  /**
   * Order number
   */
  orderNumber: string;
  /**
   * Table name
   */
  tableName: string;
  /**
   * Order type
   */
  orderType: 'DINE_IN' | 'TAKEAWAY' | 'DELIVERY';
  /**
   * Order status
   */
  status:
    | 'PENDING'
    | 'PREPARING'
    | 'READY'
    | 'SERVED'
    | 'COMPLETED'
    | 'CANCELLED';
  /**
   * Grand total
   */
  grandTotal: string;
  /**
   * Order created timestamp
   */
  createdAt: string;
  /**
   * Order updated timestamp
   */
  updatedAt: string;
  /**
   * Order items
   */
  orderItems: Array<unknown>;
};

export type UpdateKitchenStatusDto = {
  /**
   * New kitchen status
   */
  status:
    | 'PENDING'
    | 'PREPARING'
    | 'READY'
    | 'SERVED'
    | 'COMPLETED'
    | 'CANCELLED';
};

export type MenuItemDeletedResponseDto = {
  /**
   * The ID (UUID) of the deleted menu item.
   */
  id: string;
};

export type MenuItemResponseDto = {
  id: string;
  name: string;
  description?: {
    [key: string]: unknown;
  };
  /**
   * Base price, formatted as string.
   */
  basePrice: string;
  imageUrl?: {
    [key: string]: unknown;
  };
  /**
   * Indicates if the item is temporarily hidden (e.g., out of stock).
   */
  isHidden: boolean;
  /**
   * Indicates if the item is currently out of stock.
   */
  isOutOfStock: boolean;
  /**
   * Kitchen routing area for this item
   */
  routingArea:
    | 'GRILL'
    | 'FRY'
    | 'SALAD'
    | 'DRINKS'
    | 'DESSERT'
    | 'APPETIZER'
    | 'SOUP'
    | 'OTHER';
  /**
   * Expected preparation time in minutes
   */
  preparationTimeMinutes?: number;
  categoryId: string;
  storeId: string;
  sortOrder: number;
  /**
   * Creation timestamp
   */
  createdAt: string;
  /**
   * Last update timestamp
   */
  updatedAt: string;
  category: CategoryResponseDto;
  customizationGroups: Array<CustomizationGroupResponseDto>;
};

export type UpsertCategoryDto = {
  /**
   * ID (UUID) of the option to update. Omit to create a new option within the group.
   */
  id?: string;
  name: string;
};

export type UpsertCustomizationOptionDto = {
  /**
   * ID (UUID) of the option to update. Omit to create a new option within the group.
   */
  id?: string;
  name: string;
  /**
   * Optional: Additional price for this option. Must be zero or positive. Send as string (e.g., "1.50", "0", "0.00"). Defaults to 0 if omitted.
   */
  additionalPrice?: string;
};

export type UpsertCustomizationGroupDto = {
  /**
   * ID (UUID) of the existing group to update.
   */
  id?: string;
  name: string;
  /**
   * Is selecting an option from this group mandatory?
   */
  required?: boolean;
  /**
   * Minimum number of options required if group is required (usually 1 if required=true)
   */
  minSelectable?: number;
  /**
   * Maximum number of options allowed (e.g., 1 for size, >1 for toppings)
   */
  maxSelectable?: number;
  options: Array<UpsertCustomizationOptionDto>;
};

export type CreateMenuItemDto = {
  name: string;
  description?: string;
  /**
   * Base price before customizations
   */
  basePrice: string;
  /**
   * Key for image stored in S3 or similar
   */
  imageUrl?: string;
  /**
   * Set to true to temporarily hide the item (e.g., out of stock). Defaults to false (visible).
   */
  isHidden?: boolean;
  /**
   * Kitchen routing area for this item (e.g., GRILL, FRY, DRINKS). Defaults to OTHER.
   */
  routingArea?:
    | 'GRILL'
    | 'FRY'
    | 'SALAD'
    | 'DRINKS'
    | 'DESSERT'
    | 'APPETIZER'
    | 'SOUP'
    | 'OTHER';
  /**
   * Expected preparation time in minutes
   */
  preparationTimeMinutes?: number;
  /**
   * Category for the item. Provide ID to link/update existing, or just name to create new.
   */
  category: UpsertCategoryDto;
  /**
   * Optional customization groups (e.g., Size, Spice Level, Add-ons). Omit IDs for new groups/options.
   */
  customizationGroups?: Array<UpsertCustomizationGroupDto>;
};

export type UpdateMenuItemDto = {
  name?: string;
  description?: string;
  /**
   * Base price before customizations
   */
  basePrice: number;
  /**
   * Key for image stored in S3 or similar
   */
  imageUrl?: string;
  /**
   * Set to true to temporarily hide the item (e.g., out of stock). Defaults to false (visible).
   */
  isHidden?: boolean;
  /**
   * Kitchen routing area for this item (e.g., GRILL, FRY, DRINKS).
   */
  routingArea?:
    | 'GRILL'
    | 'FRY'
    | 'SALAD'
    | 'DRINKS'
    | 'DESSERT'
    | 'APPETIZER'
    | 'SOUP'
    | 'OTHER';
  /**
   * Expected preparation time in minutes
   */
  preparationTimeMinutes?: number;
  /**
   * Optional: Update or change category. Provide ID to link/update existing, or just name to create new.
   */
  category?: UpsertCategoryDto;
  /**
   * Optional: Full list of desired customization groups. Provide IDs to update existing groups/options. Groups/options missing IDs will be created. Existing groups/options NOT included in this array (by ID) WILL BE DELETED.
   */
  customizationGroups?: Array<UpsertCustomizationGroupDto>;
};

export type CheckoutCartDto = {
  /**
   * Order type
   */
  orderType: 'DINE_IN' | 'TAKEAWAY' | 'DELIVERY';
  /**
   * Table name (from session)
   */
  tableName?: string;
};

export type OrderItemCustomizationResponseDto = {
  id: string;
  customizationOptionId: string;
  finalPrice: string;
};

export type OrderItemResponseDto = {
  id: string;
  menuItemId: {
    [key: string]: unknown;
  };
  price: string;
  quantity: number;
  finalPrice: string;
  notes: {
    [key: string]: unknown;
  };
  customizations: Array<OrderItemCustomizationResponseDto>;
};

export type OrderResponseDto = {
  id: string;
  orderNumber: string;
  storeId: string;
  sessionId: {
    [key: string]: unknown;
  };
  tableName: string;
  status:
    | 'PENDING'
    | 'PREPARING'
    | 'READY'
    | 'SERVED'
    | 'COMPLETED'
    | 'CANCELLED';
  orderType: 'DINE_IN' | 'TAKEAWAY' | 'DELIVERY';
  paidAt: {
    [key: string]: unknown;
  };
  subTotal: string;
  vatRateSnapshot: string;
  serviceChargeRateSnapshot: string;
  vatAmount: string;
  serviceChargeAmount: string;
  grandTotal: string;
  /**
   * Total amount paid across all payments (supports bill splitting)
   */
  totalPaid: string;
  /**
   * Remaining balance to be paid
   */
  remainingBalance: string;
  /**
   * Whether the order is fully paid
   */
  isPaidInFull: boolean;
  orderItems: Array<OrderItemResponseDto>;
  createdAt: string;
  updatedAt: string;
};

export type PaginationMeta = {
  /**
   * Total number of items
   */
  total: number;
  /**
   * Current page number
   */
  page: number;
  /**
   * Number of items per page
   */
  limit: number;
  /**
   * Total number of pages
   */
  totalPages: number;
  /**
   * Whether there is a next page
   */
  hasNext: boolean;
  /**
   * Whether there is a previous page
   */
  hasPrev: boolean;
};

export type PaginatedResponseDto = {
  /**
   * Array of items
   */
  items: Array<string>;
  /**
   * Pagination metadata
   */
  meta: PaginationMeta;
};

export type UpdateOrderStatusDto = {
  /**
   * New order status
   */
  status:
    | 'PENDING'
    | 'PREPARING'
    | 'READY'
    | 'SERVED'
    | 'COMPLETED'
    | 'CANCELLED';
};

export type RecordPaymentDto = {
  /**
   * Payment amount (as string for Decimal precision)
   */
  amount: string;
  /**
   * Payment method
   */
  paymentMethod:
    | 'CASH'
    | 'CREDIT_CARD'
    | 'DEBIT_CARD'
    | 'MOBILE_PAYMENT'
    | 'OTHER';
  /**
   * Amount tendered by customer (for cash payments only)
   */
  amountTendered?: string;
  /**
   * External transaction ID (for card/mobile payments)
   */
  transactionId?: string;
  /**
   * Additional notes
   */
  notes?: string;
};

export type PaymentResponseDto = {
  id: string;
  orderId: string;
  amount: string;
  paymentMethod:
    | 'CASH'
    | 'CREDIT_CARD'
    | 'DEBIT_CARD'
    | 'MOBILE_PAYMENT'
    | 'OTHER';
  amountTendered: string;
  change: string;
  transactionId: {
    [key: string]: unknown;
  };
  notes: {
    [key: string]: unknown;
  };
  createdAt: string;
  updatedAt: string;
};

export type CreateRefundDto = {
  /**
   * Refund amount (as string for Decimal precision)
   */
  amount: string;
  /**
   * Reason for refund
   */
  reason?: string;
  /**
   * Staff member who processed the refund
   */
  refundedBy?: string;
};

export type RefundResponseDto = {
  id: string;
  orderId: string;
  amount: string;
  reason: {
    [key: string]: unknown;
  };
  refundedBy: {
    [key: string]: unknown;
  };
  createdAt: string;
  updatedAt: string;
};

export type StoreInformationResponseDto = {
  id: string;
  storeId: string;
  name: string;
  logoUrl?: {
    [key: string]: unknown;
  };
  address?: {
    [key: string]: unknown;
  };
  phone?: {
    [key: string]: unknown;
  };
  email?: {
    [key: string]: unknown;
  };
  website?: {
    [key: string]: unknown;
  };
  createdAt: string;
  updatedAt: string;
};

export type StoreSettingResponseDto = {
  /**
   * Setting record ID
   */
  id: string;
  /**
   * ID of the associated store
   */
  storeId: string;
  /**
   * Store currency code
   */
  currency: 'THB' | 'MMK' | 'USD' | 'EUR' | 'JPY' | 'CNY' | 'SGD' | 'HKD';
  /**
   * VAT rate (e.g., 0.07 for 7%)
   */
  vatRate?: string;
  /**
   * Service charge rate (e.g., 0.10 for 10%)
   */
  serviceChargeRate?: string;
  createdAt: string;
  updatedAt: string;
};

export type GetStoreDetailsResponseDto = {
  /**
   * Store's unique identifier
   */
  id: string;
  /**
   * Store's unique URL slug
   */
  slug: string;
  information: StoreInformationResponseDto;
  setting: StoreSettingResponseDto;
  createdAt: string;
  updatedAt: string;
};

export type CreateStoreDto = {
  /**
   * Store's display name
   */
  name: string;
};

export type UpdateStoreInformationDto = {
  /**
   * Store's display name
   */
  name: string;
  /**
   * Store's logo URL
   */
  logoUrl?: string;
  /**
   * Store's physical address
   */
  address?: string;
  /**
   * Store's contact phone number
   */
  phone?: string;
  /**
   * Store's contact email address
   */
  email?: string;
  /**
   * Store's website URL
   */
  website?: string;
};

export type UpdateStoreSettingDto = {
  /**
   * Update the default currency for the store.
   */
  currency?: 'THB' | 'MMK' | 'USD' | 'EUR' | 'JPY' | 'CNY' | 'SGD' | 'HKD';
  /**
   * Update the VAT rate. Send as a string (e.g., "0.07" for 7%, "0.125" for 12.5%). Send null or omit to remove/keep unchanged. Must be between "0.000" and "0.999".
   */
  vatRate?: string;
  /**
   * Update the Service Charge rate. Send as a string (e.g., "0.10" for 10%). Send null or omit to remove/keep unchanged. Must be between "0.000" and "0.999".
   */
  serviceChargeRate?: string;
};

export type InviteOrAssignRoleDto = {
  /**
   * The email of the user to invite or assign a role to
   */
  email: string;
  /**
   * The new role for the user in this store
   */
  role: 'OWNER' | 'ADMIN' | 'CHEF' | 'CASHIER' | 'SERVER';
};

export type TableResponseDto = {
  id: string;
  storeId: string;
  name: string;
  createdAt: string;
  updatedAt: string;
};

export type TableDeletedResponseDto = {
  /**
   * ID of the deleted table.
   */
  id: string;
  /**
   * Indicator that the deletion was successful.
   */
  deleted: boolean;
};

export type UpsertTableDto = {
  /**
   * ID (UUID) of the table to update. Omit to create a new table.
   */
  id?: string;
  /**
   * Display name or number for the table (must be unique within the store)
   */
  name: string;
};

export type BatchUpsertTableDto = {
  /**
   * An array of table objects to create or update. Any existing tables for the store NOT included in this list (by ID) will be deleted.
   */
  tables: Array<UpsertTableDto>;
};

export type UpdateTableStatusDto = {
  /**
   * New status for the table
   */
  status:
    | 'VACANT'
    | 'SEATED'
    | 'ORDERING'
    | 'SERVED'
    | 'READY_TO_PAY'
    | 'CLEANING';
};

export type CreateTableDto = {
  /**
   * Display name or number for the table (unique within the store)
   */
  name: string;
};

export type UpdateTableDto = {
  /**
   * New display name or number for the table (unique within the store)
   */
  name?: string;
};

export type ActiveTableSessionControllerCreateManualSessionData = {
  body: CreateManualSessionDto;
  path?: never;
  query: {
    /**
     * Store ID
     */
    storeId: string;
  };
  url: '/active-table-sessions/manual';
};

export type ActiveTableSessionControllerCreateManualSessionErrors = {
  /**
   * Insufficient permissions
   */
  403: unknown;
};

export type ActiveTableSessionControllerCreateManualSessionResponses = {
  /**
   * Manual session created successfully
   */
  201: SessionResponseDto;
};

export type ActiveTableSessionControllerCreateManualSessionResponse =
  ActiveTableSessionControllerCreateManualSessionResponses[keyof ActiveTableSessionControllerCreateManualSessionResponses];

export type ActiveTableSessionControllerJoinByTableData = {
  body: JoinSessionDto;
  path: {
    /**
     * Table ID from QR code
     */
    tableId: string;
  };
  query?: never;
  url: '/active-table-sessions/join-by-table/{tableId}';
};

export type ActiveTableSessionControllerJoinByTableErrors = {
  /**
   * Table not found
   */
  404: unknown;
};

export type ActiveTableSessionControllerJoinByTableResponses = {
  /**
   * Session joined/created successfully
   */
  201: SessionResponseDto;
};

export type ActiveTableSessionControllerJoinByTableResponse =
  ActiveTableSessionControllerJoinByTableResponses[keyof ActiveTableSessionControllerJoinByTableResponses];

export type ActiveTableSessionControllerFindOneData = {
  body?: never;
  path: {
    /**
     * Session ID
     */
    sessionId: string;
  };
  query?: never;
  url: '/active-table-sessions/{sessionId}';
};

export type ActiveTableSessionControllerFindOneErrors = {
  /**
   * Session not found
   */
  404: unknown;
};

export type ActiveTableSessionControllerFindOneResponses = {
  /**
   * Session found
   */
  200: SessionResponseDto;
};

export type ActiveTableSessionControllerFindOneResponse =
  ActiveTableSessionControllerFindOneResponses[keyof ActiveTableSessionControllerFindOneResponses];

export type ActiveTableSessionControllerUpdateData = {
  body: UpdateSessionDto;
  path: {
    /**
     * Session ID
     */
    sessionId: string;
  };
  query?: never;
  url: '/active-table-sessions/{sessionId}';
};

export type ActiveTableSessionControllerUpdateErrors = {
  /**
   * Session not found
   */
  404: unknown;
};

export type ActiveTableSessionControllerUpdateResponses = {
  /**
   * Session updated
   */
  200: SessionResponseDto;
};

export type ActiveTableSessionControllerUpdateResponse =
  ActiveTableSessionControllerUpdateResponses[keyof ActiveTableSessionControllerUpdateResponses];

export type ActiveTableSessionControllerFindByTokenData = {
  body?: never;
  path: {
    /**
     * Session token
     */
    token: string;
  };
  query?: never;
  url: '/active-table-sessions/token/{token}';
};

export type ActiveTableSessionControllerFindByTokenErrors = {
  /**
   * Invalid session token
   */
  404: unknown;
};

export type ActiveTableSessionControllerFindByTokenResponses = {
  /**
   * Session found
   */
  200: SessionResponseDto;
};

export type ActiveTableSessionControllerFindByTokenResponse =
  ActiveTableSessionControllerFindByTokenResponses[keyof ActiveTableSessionControllerFindByTokenResponses];

export type ActiveTableSessionControllerFindActiveByStoreData = {
  body?: never;
  path?: never;
  query: {
    /**
     * Store ID
     */
    storeId: string;
  };
  url: '/active-table-sessions';
};

export type ActiveTableSessionControllerFindActiveByStoreResponses = {
  /**
   * Active sessions retrieved
   */
  200: Array<SessionResponseDto>;
};

export type ActiveTableSessionControllerFindActiveByStoreResponse =
  ActiveTableSessionControllerFindActiveByStoreResponses[keyof ActiveTableSessionControllerFindActiveByStoreResponses];

export type ActiveTableSessionControllerCloseData = {
  body?: never;
  path: {
    /**
     * Session ID
     */
    sessionId: string;
  };
  query?: never;
  url: '/active-table-sessions/{sessionId}/close';
};

export type ActiveTableSessionControllerCloseErrors = {
  /**
   * Session already closed
   */
  400: unknown;
  /**
   * Session not found
   */
  404: unknown;
};

export type ActiveTableSessionControllerCloseResponses = {
  /**
   * Session closed
   */
  200: SessionResponseDto;
};

export type ActiveTableSessionControllerCloseResponse =
  ActiveTableSessionControllerCloseResponses[keyof ActiveTableSessionControllerCloseResponses];

export type AuthControllerLoginWithStoreData = {
  body: ChooseStoreDto;
  path?: never;
  query?: never;
  url: '/auth/login/store';
};

export type AuthControllerLoginWithStoreErrors = {
  /**
   * Invalid/Expired Token or User not member of store.
   */
  401: unknown;
  /**
   * User/Membership data not found (should be rare).
   */
  404: unknown;
};

export type AuthControllerLoginWithStoreResponses = {
  /**
   * Store selected. Full JWT set in HttpOnly cookie. Token contains { sub, storeId, role }.
   */
  200: StandardApiResponse;
};

export type AuthControllerLoginWithStoreResponse =
  AuthControllerLoginWithStoreResponses[keyof AuthControllerLoginWithStoreResponses];

export type AuthControllerGetAuth0ConfigData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/auth/auth0/config';
};

export type AuthControllerGetAuth0ConfigResponses = {
  /**
   * Auth0 configuration retrieved successfully
   */
  200: unknown;
};

export type AuthControllerValidateAuth0TokenData = {
  body?: never;
  headers: {
    /**
     * Bearer <auth0-access-token>
     */
    Authorization: string;
  };
  path?: never;
  query?: never;
  url: '/auth/auth0/validate';
};

export type AuthControllerValidateAuth0TokenErrors = {
  /**
   * Invalid Auth0 token or Auth0 is not enabled
   */
  401: unknown;
};

export type AuthControllerValidateAuth0TokenResponses = {
  /**
   * Auth0 token validated and user synced successfully
   */
  200: unknown;
};

export type AuthControllerGetAuth0ProfileData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/auth/auth0/profile';
};

export type AuthControllerGetAuth0ProfileErrors = {
  /**
   * Invalid or missing Auth0 token
   */
  401: unknown;
};

export type AuthControllerGetAuth0ProfileResponses = {
  /**
   * User profile retrieved successfully
   */
  200: unknown;
};

export type UserControllerRegisterData = {
  body: CreateUserDto;
  path?: never;
  query?: never;
  url: '/users/register';
};

export type UserControllerRegisterErrors = {
  /**
   * Validation error (e.g., email exists, disposable domain, invalid input)
   */
  400: unknown;
  /**
   * Internal server error (e.g., failed to send email)
   */
  500: unknown;
};

export type UserControllerRegisterResponses = {
  /**
   * User registered successfully. Verification email sent.
   */
  201: StandardApiResponse;
};

export type UserControllerRegisterResponse =
  UserControllerRegisterResponses[keyof UserControllerRegisterResponses];

export type UserControllerAddUserToStoreData = {
  body: AddUserToStoreDto;
  path?: never;
  query?: never;
  url: '/users/add-to-store';
};

export type UserControllerAddUserToStoreErrors = {
  /**
   * Validation error (e.g., invalid role, missing fields)
   */
  400: unknown;
  /**
   * User does not have permission to perform this action.
   */
  403: unknown;
  /**
   * User or Store not found.
   */
  404: unknown;
};

export type UserControllerAddUserToStoreResponses = {
  /**
   * User assigned/updated in store successfully.
   */
  200: StandardApiResponse;
};

export type UserControllerAddUserToStoreResponse =
  UserControllerAddUserToStoreResponses[keyof UserControllerAddUserToStoreResponses];

export type UserControllerGetUserStoresData = {
  body?: never;
  path: {
    /**
     * ID (UUID) of the target user
     */
    id: string;
  };
  query?: never;
  url: '/users/{id}/stores';
};

export type UserControllerGetUserStoresErrors = {
  /**
   * User does not have permission to view this.
   */
  403: unknown;
  /**
   * Target user not found.
   */
  404: unknown;
};

export type UserControllerGetUserStoresResponses = {
  /**
   * List of user store memberships retrieved.
   */
  200: StandardApiResponse;
};

export type UserControllerGetUserStoresResponse =
  UserControllerGetUserStoresResponses[keyof UserControllerGetUserStoresResponses];

export type UserControllerGetCurrentUserData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Optional: ID (UUID) of the store to get user context (e.g., role) for.
     */
    storeId?: string;
  };
  url: '/users/me';
};

export type UserControllerGetCurrentUserResponses = {
  /**
   * Current user profile retrieved successfully.
   */
  200: StandardApiResponse & {
    status?: string;
    data?: UserProfileResponseDto;
    errors?: Array<unknown>;
    message?: string;
  };
};

export type UserControllerGetCurrentUserResponse =
  UserControllerGetCurrentUserResponses[keyof UserControllerGetCurrentUserResponses];

export type CartControllerClearCartData = {
  body?: never;
  headers?: {
    /**
     * Session token for customer access (SOS app)
     */
    'x-session-token'?: string;
  };
  path?: never;
  query: {
    /**
     * Active table session ID
     */
    sessionId: string;
  };
  url: '/cart';
};

export type CartControllerClearCartErrors = {
  /**
   * Authentication required
   */
  401: unknown;
  /**
   * Access denied
   */
  403: unknown;
  /**
   * Cart not found
   */
  404: unknown;
};

export type CartControllerClearCartResponses = {
  /**
   * Cart cleared successfully
   */
  200: CartResponseDto;
};

export type CartControllerClearCartResponse =
  CartControllerClearCartResponses[keyof CartControllerClearCartResponses];

export type CartControllerGetCartData = {
  body?: never;
  headers?: {
    /**
     * Session token for customer access (SOS app)
     */
    'x-session-token'?: string;
  };
  path?: never;
  query: {
    /**
     * Active table session ID
     */
    sessionId: string;
  };
  url: '/cart';
};

export type CartControllerGetCartErrors = {
  /**
   * Authentication required
   */
  401: unknown;
  /**
   * Access denied
   */
  403: unknown;
  /**
   * Session not found
   */
  404: unknown;
};

export type CartControllerGetCartResponses = {
  /**
   * Cart retrieved successfully
   */
  200: CartResponseDto;
};

export type CartControllerGetCartResponse =
  CartControllerGetCartResponses[keyof CartControllerGetCartResponses];

export type CartControllerAddItemData = {
  body: AddToCartDto;
  headers?: {
    /**
     * Session token for customer access (SOS app)
     */
    'x-session-token'?: string;
  };
  path?: never;
  query: {
    /**
     * Active table session ID
     */
    sessionId: string;
  };
  url: '/cart/items';
};

export type CartControllerAddItemErrors = {
  /**
   * Invalid input
   */
  400: unknown;
  /**
   * Authentication required
   */
  401: unknown;
  /**
   * Access denied
   */
  403: unknown;
  /**
   * Menu item or session not found
   */
  404: unknown;
};

export type CartControllerAddItemResponses = {
  /**
   * Item added to cart successfully
   */
  201: CartResponseDto;
};

export type CartControllerAddItemResponse =
  CartControllerAddItemResponses[keyof CartControllerAddItemResponses];

export type CartControllerRemoveItemData = {
  body?: never;
  headers?: {
    /**
     * Session token for customer access (SOS app)
     */
    'x-session-token'?: string;
  };
  path: {
    /**
     * Cart item ID
     */
    cartItemId: string;
  };
  query: {
    /**
     * Active table session ID
     */
    sessionId: string;
  };
  url: '/cart/items/{cartItemId}';
};

export type CartControllerRemoveItemErrors = {
  /**
   * Authentication required
   */
  401: unknown;
  /**
   * Access denied
   */
  403: unknown;
  /**
   * Cart item not found
   */
  404: unknown;
};

export type CartControllerRemoveItemResponses = {
  /**
   * Item removed from cart successfully
   */
  200: CartResponseDto;
};

export type CartControllerRemoveItemResponse =
  CartControllerRemoveItemResponses[keyof CartControllerRemoveItemResponses];

export type CartControllerUpdateItemData = {
  body: UpdateCartItemDto;
  headers?: {
    /**
     * Session token for customer access (SOS app)
     */
    'x-session-token'?: string;
  };
  path: {
    /**
     * Cart item ID
     */
    cartItemId: string;
  };
  query: {
    /**
     * Active table session ID
     */
    sessionId: string;
  };
  url: '/cart/items/{cartItemId}';
};

export type CartControllerUpdateItemErrors = {
  /**
   * Invalid input
   */
  400: unknown;
  /**
   * Authentication required
   */
  401: unknown;
  /**
   * Access denied
   */
  403: unknown;
  /**
   * Cart item not found
   */
  404: unknown;
};

export type CartControllerUpdateItemResponses = {
  /**
   * Cart item updated successfully
   */
  200: CartResponseDto;
};

export type CartControllerUpdateItemResponse =
  CartControllerUpdateItemResponses[keyof CartControllerUpdateItemResponses];

export type CategoryControllerFindAllData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * ID (UUID) of the store (use this OR storeSlug).
     */
    storeId?: string;
    /**
     * URL Slug of the store (use this OR storeId).
     */
    storeSlug?: string;
  };
  url: '/categories';
};

export type CategoryControllerFindAllResponses = {
  /**
   * List of active categories with included active menu items.
   */
  200: StandardApiResponse & {
    status?: string;
    data?: Array<CategoryResponseDto>;
    errors?: Array<unknown>;
    message?: string;
  };
};

export type CategoryControllerFindAllResponse =
  CategoryControllerFindAllResponses[keyof CategoryControllerFindAllResponses];

export type CategoryControllerCreateData = {
  body: CreateCategoryDto;
  path?: never;
  query: {
    storeId: string;
  };
  url: '/categories';
};

export type CategoryControllerCreateResponses = {
  /**
   * Category created successfully.
   */
  201: StandardApiResponse & {
    status?: string;
    data?: CategoryBasicResponseDto;
    errors?: Array<unknown>;
    message?: string;
  };
};

export type CategoryControllerCreateResponse =
  CategoryControllerCreateResponses[keyof CategoryControllerCreateResponses];

export type CategoryControllerRemoveData = {
  body?: never;
  path: {
    /**
     * ID (UUID) of the category to delete
     */
    id: string;
  };
  query: {
    storeId: string;
  };
  url: '/categories/{id}';
};

export type CategoryControllerRemoveResponses = {
  /**
   * Category deleted successfully.
   */
  200: StandardApiResponse & {
    status?: string;
    data?: CategoryDeletedResponseDto;
    errors?: Array<unknown>;
    message?: string;
  };
};

export type CategoryControllerRemoveResponse =
  CategoryControllerRemoveResponses[keyof CategoryControllerRemoveResponses];

export type CategoryControllerFindOneData = {
  body?: never;
  path: {
    /**
     * ID (UUID) of the category to fetch
     */
    id: string;
  };
  query: {
    /**
     * ID (UUID) of the store this category belongs to
     */
    storeId: string;
  };
  url: '/categories/{id}';
};

export type CategoryControllerFindOneResponses = {
  200: unknown;
};

export type CategoryControllerUpdateData = {
  body: UpdateCategoryDto;
  path: {
    /**
     * ID (UUID) of the category to update
     */
    id: string;
  };
  query: {
    storeId: string;
  };
  url: '/categories/{id}';
};

export type CategoryControllerUpdateResponses = {
  /**
   * Category updated successfully.
   */
  200: StandardApiResponse & {
    status?: string;
    data?: CategoryBasicResponseDto;
    errors?: Array<unknown>;
    message?: string;
  };
};

export type CategoryControllerUpdateResponse =
  CategoryControllerUpdateResponses[keyof CategoryControllerUpdateResponses];

export type CategoryControllerSortCategoriesData = {
  body: SortCategoriesPayloadDto;
  path?: never;
  query: {
    storeId: string;
  };
  url: '/categories/sort';
};

export type CategoryControllerSortCategoriesResponses = {
  /**
   * Categories and items reordered successfully.
   */
  200: StandardApiResponse & {
    status?: string;
    data?: string;
    errors?: Array<unknown>;
    message?: string;
  };
};

export type CategoryControllerSortCategoriesResponse =
  CategoryControllerSortCategoriesResponses[keyof CategoryControllerSortCategoriesResponses];

export type UploadControllerUploadImageData = {
  /**
   * Image file to upload (jpg, jpeg, png, webp)
   */
  body: {
    file?: Blob | File;
  };
  path?: never;
  query?: never;
  url: '/upload/image';
};

export type UploadControllerUploadImageErrors = {
  /**
   * Unauthorized.
   */
  401: unknown;
};

export type UploadControllerUploadImageResponses = {
  /**
   * Image uploaded successfully
   */
  200: StandardApiResponse & {
    status?: string;
    data?: UploadImageResponseDto;
    errors?: Array<unknown>;
    message?: string;
  };
};

export type UploadControllerUploadImageResponse =
  UploadControllerUploadImageResponses[keyof UploadControllerUploadImageResponses];

export type HealthControllerHealthCheckData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/health';
};

export type HealthControllerHealthCheckResponses = {
  200: unknown;
};

export type KitchenControllerGetOrdersData = {
  body?: never;
  path?: never;
  query: {
    /**
     * Store ID
     */
    storeId: string;
    /**
     * Filter by order status
     */
    status?:
      | 'PENDING'
      | 'PREPARING'
      | 'READY'
      | 'SERVED'
      | 'COMPLETED'
      | 'CANCELLED';
    /**
     * Filter by menu item routing area
     */
    routingArea?:
      | 'GRILL'
      | 'FRY'
      | 'SALAD'
      | 'DRINKS'
      | 'DESSERT'
      | 'APPETIZER'
      | 'SOUP'
      | 'OTHER';
  };
  url: '/kitchen/orders';
};

export type KitchenControllerGetOrdersResponses = {
  /**
   * Orders retrieved successfully
   */
  200: Array<KitchenOrderResponseDto>;
};

export type KitchenControllerGetOrdersResponse =
  KitchenControllerGetOrdersResponses[keyof KitchenControllerGetOrdersResponses];

export type KitchenControllerGetOrderDetailsData = {
  body?: never;
  path: {
    orderId: string;
  };
  query?: never;
  url: '/kitchen/orders/{orderId}';
};

export type KitchenControllerGetOrderDetailsResponses = {
  /**
   * Order details retrieved successfully
   */
  200: KitchenOrderResponseDto;
};

export type KitchenControllerGetOrderDetailsResponse =
  KitchenControllerGetOrderDetailsResponses[keyof KitchenControllerGetOrderDetailsResponses];

export type KitchenControllerUpdateOrderStatusData = {
  body: UpdateKitchenStatusDto;
  path: {
    orderId: string;
  };
  query: {
    /**
     * Store ID
     */
    storeId: string;
  };
  url: '/kitchen/orders/{orderId}/status';
};

export type KitchenControllerUpdateOrderStatusResponses = {
  /**
   * Order status updated successfully
   */
  200: KitchenOrderResponseDto;
};

export type KitchenControllerUpdateOrderStatusResponse =
  KitchenControllerUpdateOrderStatusResponses[keyof KitchenControllerUpdateOrderStatusResponses];

export type MenuControllerGetStoreMenuItemsData = {
  body?: never;
  path?: never;
  query: {
    /**
     * ID (UUID) of the store whose menu items to fetch
     */
    storeId: string;
  };
  url: '/menu-items';
};

export type MenuControllerGetStoreMenuItemsResponses = {
  /**
   * List of menu items retrieved successfully.
   */
  200: StandardApiResponse & {
    status?: string;
    data?: Array<MenuItemResponseDto>;
    errors?: Array<unknown>;
    message?: string;
  };
};

export type MenuControllerGetStoreMenuItemsResponse =
  MenuControllerGetStoreMenuItemsResponses[keyof MenuControllerGetStoreMenuItemsResponses];

export type MenuControllerCreateMenuItemData = {
  body: CreateMenuItemDto;
  path?: never;
  query: {
    storeId: string;
  };
  url: '/menu-items';
};

export type MenuControllerCreateMenuItemResponses = {
  /**
   * Menu item created successfully.
   */
  201: StandardApiResponse & {
    status?: string;
    data?: string;
    errors?: Array<unknown>;
    message?: string;
  };
};

export type MenuControllerCreateMenuItemResponse =
  MenuControllerCreateMenuItemResponses[keyof MenuControllerCreateMenuItemResponses];

export type MenuControllerDeleteMenuItemData = {
  body?: never;
  path: {
    id: string;
  };
  query: {
    storeId: string;
  };
  url: '/menu-items/{id}';
};

export type MenuControllerDeleteMenuItemResponses = {
  /**
   * Menu item deleted successfully.
   */
  200: StandardApiResponse & {
    status?: string;
    data?: MenuItemDeletedResponseDto;
    errors?: Array<unknown>;
    message?: string;
  };
};

export type MenuControllerDeleteMenuItemResponse =
  MenuControllerDeleteMenuItemResponses[keyof MenuControllerDeleteMenuItemResponses];

export type MenuControllerGetMenuItemByIdData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: '/menu-items/{id}';
};

export type MenuControllerGetMenuItemByIdResponses = {
  /**
   * Menu item details retrieved successfully.
   */
  200: StandardApiResponse & {
    status?: string;
    data?: MenuItemResponseDto;
    errors?: Array<unknown>;
    message?: string;
  };
};

export type MenuControllerGetMenuItemByIdResponse =
  MenuControllerGetMenuItemByIdResponses[keyof MenuControllerGetMenuItemByIdResponses];

export type MenuControllerUpdateMenuItemData = {
  body: UpdateMenuItemDto;
  path: {
    id: string;
  };
  query: {
    storeId: string;
  };
  url: '/menu-items/{id}';
};

export type MenuControllerUpdateMenuItemResponses = {
  /**
   * Menu item updated successfully.
   */
  200: StandardApiResponse & {
    status?: string;
    data?: MenuItemResponseDto;
    errors?: Array<unknown>;
    message?: string;
  };
};

export type MenuControllerUpdateMenuItemResponse =
  MenuControllerUpdateMenuItemResponses[keyof MenuControllerUpdateMenuItemResponses];

export type OrderControllerCheckoutData = {
  body: CheckoutCartDto;
  path?: never;
  query: {
    /**
     * Active table session ID
     */
    sessionId: string;
  };
  url: '/orders/checkout';
};

export type OrderControllerCheckoutErrors = {
  /**
   * Cart is empty or invalid
   */
  400: unknown;
  /**
   * Session or cart not found
   */
  404: unknown;
};

export type OrderControllerCheckoutResponses = {
  /**
   * Order created successfully
   */
  201: OrderResponseDto;
};

export type OrderControllerCheckoutResponse =
  OrderControllerCheckoutResponses[keyof OrderControllerCheckoutResponses];

export type OrderControllerFindOneData = {
  body?: never;
  path: {
    /**
     * Order ID
     */
    orderId: string;
  };
  query?: never;
  url: '/orders/{orderId}';
};

export type OrderControllerFindOneErrors = {
  /**
   * Order not found
   */
  404: unknown;
};

export type OrderControllerFindOneResponses = {
  /**
   * Order retrieved successfully
   */
  200: OrderResponseDto;
};

export type OrderControllerFindOneResponse =
  OrderControllerFindOneResponses[keyof OrderControllerFindOneResponses];

export type OrderControllerFindBySessionData = {
  body?: never;
  path: {
    /**
     * Active table session ID
     */
    sessionId: string;
  };
  query?: never;
  url: '/orders/session/{sessionId}';
};

export type OrderControllerFindBySessionResponses = {
  /**
   * Orders retrieved successfully
   */
  200: Array<OrderResponseDto>;
};

export type OrderControllerFindBySessionResponse =
  OrderControllerFindBySessionResponses[keyof OrderControllerFindBySessionResponses];

export type OrderControllerFindForKdsData = {
  body?: never;
  path?: never;
  query: {
    /**
     * Page number (1-indexed)
     */
    page?: number;
    /**
     * Items per page (max 100)
     */
    limit?: number;
    /**
     * Filter by order status (defaults to active orders)
     */
    status?:
      | 'PENDING'
      | 'PREPARING'
      | 'READY'
      | 'SERVED'
      | 'COMPLETED'
      | 'CANCELLED';
    /**
     * Store ID
     */
    storeId: string;
  };
  url: '/orders/kds';
};

export type OrderControllerFindForKdsResponses = {
  /**
   * KDS orders retrieved successfully
   */
  200: PaginatedResponseDto;
};

export type OrderControllerFindForKdsResponse =
  OrderControllerFindForKdsResponses[keyof OrderControllerFindForKdsResponses];

export type OrderControllerFindByStoreData = {
  body?: never;
  path?: never;
  query: {
    /**
     * Store ID
     */
    storeId: string;
    /**
     * Page number (1-indexed)
     */
    page?: number;
    /**
     * Items per page (max 100)
     */
    limit?: number;
  };
  url: '/orders';
};

export type OrderControllerFindByStoreResponses = {
  /**
   * Orders retrieved successfully
   */
  200: PaginatedResponseDto;
};

export type OrderControllerFindByStoreResponse =
  OrderControllerFindByStoreResponses[keyof OrderControllerFindByStoreResponses];

export type OrderControllerUpdateStatusData = {
  body: UpdateOrderStatusDto;
  path: {
    /**
     * Order ID
     */
    orderId: string;
  };
  query?: never;
  url: '/orders/{orderId}/status';
};

export type OrderControllerUpdateStatusErrors = {
  /**
   * Invalid status transition
   */
  400: unknown;
  /**
   * Order not found
   */
  404: unknown;
};

export type OrderControllerUpdateStatusResponses = {
  /**
   * Order status updated successfully
   */
  200: OrderResponseDto;
};

export type OrderControllerUpdateStatusResponse =
  OrderControllerUpdateStatusResponses[keyof OrderControllerUpdateStatusResponses];

export type PaymentControllerFindPaymentsByOrderData = {
  body?: never;
  path: {
    /**
     * Order ID
     */
    orderId: string;
  };
  query?: never;
  url: '/payments/orders/{orderId}';
};

export type PaymentControllerFindPaymentsByOrderErrors = {
  /**
   * Forbidden - insufficient permissions
   */
  403: unknown;
  /**
   * Order not found
   */
  404: unknown;
};

export type PaymentControllerFindPaymentsByOrderResponses = {
  /**
   * Payments retrieved successfully
   */
  200: Array<PaymentResponseDto>;
};

export type PaymentControllerFindPaymentsByOrderResponse =
  PaymentControllerFindPaymentsByOrderResponses[keyof PaymentControllerFindPaymentsByOrderResponses];

export type PaymentControllerRecordPaymentData = {
  body: RecordPaymentDto;
  path: {
    /**
     * Order ID
     */
    orderId: string;
  };
  query?: never;
  url: '/payments/orders/{orderId}';
};

export type PaymentControllerRecordPaymentErrors = {
  /**
   * Invalid payment amount
   */
  400: unknown;
  /**
   * Forbidden - insufficient permissions
   */
  403: unknown;
  /**
   * Order not found
   */
  404: unknown;
};

export type PaymentControllerRecordPaymentResponses = {
  /**
   * Payment recorded successfully
   */
  201: PaymentResponseDto;
};

export type PaymentControllerRecordPaymentResponse =
  PaymentControllerRecordPaymentResponses[keyof PaymentControllerRecordPaymentResponses];

export type PaymentControllerGetPaymentSummaryData = {
  body?: never;
  path: {
    /**
     * Order ID
     */
    orderId: string;
  };
  query?: never;
  url: '/payments/orders/{orderId}/summary';
};

export type PaymentControllerGetPaymentSummaryErrors = {
  /**
   * Forbidden - insufficient permissions
   */
  403: unknown;
  /**
   * Order not found
   */
  404: unknown;
};

export type PaymentControllerGetPaymentSummaryResponses = {
  /**
   * Payment summary retrieved successfully
   */
  200: unknown;
};

export type PaymentControllerFindRefundsByOrderData = {
  body?: never;
  path: {
    /**
     * Order ID
     */
    orderId: string;
  };
  query?: never;
  url: '/payments/orders/{orderId}/refunds';
};

export type PaymentControllerFindRefundsByOrderErrors = {
  /**
   * Forbidden - insufficient permissions
   */
  403: unknown;
  /**
   * Order not found
   */
  404: unknown;
};

export type PaymentControllerFindRefundsByOrderResponses = {
  /**
   * Refunds retrieved successfully
   */
  200: Array<RefundResponseDto>;
};

export type PaymentControllerFindRefundsByOrderResponse =
  PaymentControllerFindRefundsByOrderResponses[keyof PaymentControllerFindRefundsByOrderResponses];

export type PaymentControllerCreateRefundData = {
  body: CreateRefundDto;
  path: {
    /**
     * Order ID
     */
    orderId: string;
  };
  query?: never;
  url: '/payments/orders/{orderId}/refunds';
};

export type PaymentControllerCreateRefundErrors = {
  /**
   * Invalid refund amount
   */
  400: unknown;
  /**
   * Forbidden - insufficient permissions
   */
  403: unknown;
  /**
   * Order not found
   */
  404: unknown;
};

export type PaymentControllerCreateRefundResponses = {
  /**
   * Refund created successfully
   */
  201: RefundResponseDto;
};

export type PaymentControllerCreateRefundResponse =
  PaymentControllerCreateRefundResponses[keyof PaymentControllerCreateRefundResponses];

export type StoreControllerGetStoreDetailsData = {
  body?: never;
  path: {
    /**
     * ID (UUID) of the store to retrieve
     */
    id: string;
  };
  query?: never;
  url: '/stores/{id}';
};

export type StoreControllerGetStoreDetailsErrors = {
  /**
   * Store not found.
   */
  404: unknown;
};

export type StoreControllerGetStoreDetailsResponses = {
  /**
   * Store details retrieved successfully.
   */
  200: StandardApiResponse & {
    status?: string;
    data?: GetStoreDetailsResponseDto;
    errors?: Array<unknown>;
    message?: string;
  };
};

export type StoreControllerGetStoreDetailsResponse =
  StoreControllerGetStoreDetailsResponses[keyof StoreControllerGetStoreDetailsResponses];

export type StoreControllerCreateStoreData = {
  body: CreateStoreDto;
  path?: never;
  query?: never;
  url: '/stores';
};

export type StoreControllerCreateStoreErrors = {
  /**
   * Unauthorized - Invalid or missing JWT.
   */
  401: unknown;
};

export type StoreControllerCreateStoreResponses = {
  /**
   * Store created successfully.
   */
  201: StandardApiResponse & {
    status?: string;
    data?: string;
    errors?: Array<unknown>;
    message?: string;
  };
};

export type StoreControllerCreateStoreResponse =
  StoreControllerCreateStoreResponses[keyof StoreControllerCreateStoreResponses];

export type StoreControllerUpdateStoreInformationData = {
  body: UpdateStoreInformationDto;
  path?: never;
  query: {
    storeId: string;
  };
  url: '/stores/{id}/information';
};

export type StoreControllerUpdateStoreInformationErrors = {
  /**
   * Unauthorized - Invalid or missing JWT.
   */
  401: unknown;
};

export type StoreControllerUpdateStoreInformationResponses = {
  /**
   * Store updated successfully.
   */
  200: StandardApiResponse;
};

export type StoreControllerUpdateStoreInformationResponse =
  StoreControllerUpdateStoreInformationResponses[keyof StoreControllerUpdateStoreInformationResponses];

export type StoreControllerUpdateStoreSettingsData = {
  body: UpdateStoreSettingDto;
  path: {
    /**
     * ID (UUID) of the store whose settings to update
     */
    id: string;
  };
  query?: never;
  url: '/stores/{id}/settings';
};

export type StoreControllerUpdateStoreSettingsErrors = {
  /**
   * Unauthorized - Invalid or missing JWT.
   */
  401: unknown;
};

export type StoreControllerUpdateStoreSettingsResponses = {
  /**
   * Store settings updated successfully.
   */
  200: StandardApiResponse & {
    status?: string;
    data?: StoreSettingResponseDto;
    errors?: Array<unknown>;
    message?: string;
  };
};

export type StoreControllerUpdateStoreSettingsResponse =
  StoreControllerUpdateStoreSettingsResponses[keyof StoreControllerUpdateStoreSettingsResponses];

export type StoreControllerInviteOrAssignRoleByEmailData = {
  body: InviteOrAssignRoleDto;
  path?: never;
  query: {
    storeId: string;
  };
  url: '/stores/{id}/invite-assign-role';
};

export type StoreControllerInviteOrAssignRoleByEmailErrors = {
  /**
   * Unauthorized - Invalid or missing JWT.
   */
  401: unknown;
  /**
   * Store not found.
   */
  404: unknown;
};

export type StoreControllerInviteOrAssignRoleByEmailResponses = {
  /**
   * Role assigned successfully.
   */
  200: StandardApiResponse & {
    status?: string;
    data?: string;
    errors?: Array<unknown>;
    message?: string;
  };
};

export type StoreControllerInviteOrAssignRoleByEmailResponse =
  StoreControllerInviteOrAssignRoleByEmailResponses[keyof StoreControllerInviteOrAssignRoleByEmailResponses];

export type TableControllerFindAllByStoreData = {
  body?: never;
  path: {
    /**
     * ID (UUID) of the store
     */
    storeId: string;
  };
  query?: never;
  url: '/stores/{storeId}/tables';
};

export type TableControllerFindAllByStoreResponses = {
  /**
   * List of tables for the store, naturally sorted by name.
   */
  200: StandardApiResponse & {
    status?: string;
    data?: Array<TableResponseDto>;
    errors?: Array<unknown>;
    message?: string;
  };
};

export type TableControllerFindAllByStoreResponse =
  TableControllerFindAllByStoreResponses[keyof TableControllerFindAllByStoreResponses];

export type TableControllerCreateTableData = {
  body: CreateTableDto;
  path: {
    /**
     * ID (UUID) of the store
     */
    storeId: string;
  };
  query?: never;
  url: '/stores/{storeId}/tables';
};

export type TableControllerCreateTableResponses = {
  /**
   * Table created successfully.
   */
  201: StandardApiResponse & {
    status?: string;
    data?: TableResponseDto;
    errors?: Array<unknown>;
    message?: string;
  };
};

export type TableControllerCreateTableResponse =
  TableControllerCreateTableResponses[keyof TableControllerCreateTableResponses];

export type TableControllerSyncTablesData = {
  body: BatchUpsertTableDto;
  path: {
    /**
     * ID (UUID) of the store
     */
    storeId: string;
  };
  query?: never;
  url: '/stores/{storeId}/tables/batch-sync';
};

export type TableControllerSyncTablesResponses = {
  /**
   * Tables synchronized successfully. Returns the final list of tables for the store.
   */
  200: StandardApiResponse & {
    status?: string;
    data?: Array<TableResponseDto>;
    errors?: Array<unknown>;
    message?: string;
  };
};

export type TableControllerSyncTablesResponse =
  TableControllerSyncTablesResponses[keyof TableControllerSyncTablesResponses];

export type TableControllerDeleteTableData = {
  body?: never;
  path: {
    /**
     * ID (UUID) of the store
     */
    storeId: string;
    /**
     * ID (UUID) of the table to delete
     */
    tableId: string;
  };
  query?: never;
  url: '/stores/{storeId}/tables/{tableId}';
};

export type TableControllerDeleteTableResponses = {
  /**
   * Table deleted successfully.
   */
  200: StandardApiResponse & {
    status?: string;
    data?: TableDeletedResponseDto;
    errors?: Array<unknown>;
    message?: string;
  };
};

export type TableControllerDeleteTableResponse =
  TableControllerDeleteTableResponses[keyof TableControllerDeleteTableResponses];

export type TableControllerFindOneData = {
  body?: never;
  path: {
    /**
     * ID (UUID) of the store
     */
    storeId: string;
    /**
     * ID (UUID) of the table
     */
    tableId: string;
  };
  query?: never;
  url: '/stores/{storeId}/tables/{tableId}';
};

export type TableControllerFindOneResponses = {
  /**
   * Table details retrieved successfully.
   */
  200: StandardApiResponse & {
    status?: string;
    data?: TableResponseDto;
    errors?: Array<unknown>;
    message?: string;
  };
};

export type TableControllerFindOneResponse =
  TableControllerFindOneResponses[keyof TableControllerFindOneResponses];

export type TableControllerUpdateTableData = {
  body: UpdateTableDto;
  path: {
    /**
     * ID (UUID) of the store
     */
    storeId: string;
    /**
     * ID (UUID) of the table to update
     */
    tableId: string;
  };
  query?: never;
  url: '/stores/{storeId}/tables/{tableId}';
};

export type TableControllerUpdateTableResponses = {
  /**
   * Table updated successfully.
   */
  200: StandardApiResponse & {
    status?: string;
    data?: TableResponseDto;
    errors?: Array<unknown>;
    message?: string;
  };
};

export type TableControllerUpdateTableResponse =
  TableControllerUpdateTableResponses[keyof TableControllerUpdateTableResponses];

export type TableControllerUpdateTableStatusData = {
  body: UpdateTableStatusDto;
  path: {
    /**
     * ID (UUID) of the store
     */
    storeId: string;
    /**
     * ID (UUID) of the table to update status
     */
    tableId: string;
  };
  query?: never;
  url: '/stores/{storeId}/tables/{tableId}/status';
};

export type TableControllerUpdateTableStatusResponses = {
  /**
   * Table status updated successfully.
   */
  200: StandardApiResponse & {
    status?: string;
    data?: TableResponseDto;
    errors?: Array<unknown>;
    message?: string;
  };
};

export type TableControllerUpdateTableStatusResponse =
  TableControllerUpdateTableStatusResponses[keyof TableControllerUpdateTableStatusResponses];
