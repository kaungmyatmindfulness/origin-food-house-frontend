/**
 * EXAMPLE: Translated MenuPage Component
 *
 * This file shows how to use translations in the MenuPage.
 * Replace the content of page.tsx with this code to enable translations.
 */

'use client';

import { GripVertical, Plus } from 'lucide-react';
import { useCallback, useState } from 'react';
import { useQuery } from '@tanstack/react-query';
import { useTranslations } from 'next-intl';

import {
  selectSelectedStoreId,
  useAuthStore,
} from '@/features/auth/store/auth.store';
import { getCategories } from '@/features/menu/services/category.service';
import {
  selectEditMenuItemId,
  useMenuStore,
} from '@/features/menu/store/menu.store';
import { menuKeys } from '@/features/menu/queries/menu.keys';
import { CategoryCard } from '@/features/menu/components/category-card';
import { CategoryFormDialog } from '@/features/menu/components/category-form-dialog';
import { ItemModal } from '@/features/menu/components/item-modal';
import { MenuItemFormDialog } from '@/features/menu/components/menu-item-form-dialog';
import { ReorderMenuDialog } from '@/features/menu/components/reorder-menu-dialog';
import { useDialog } from '@/common/hooks/useDialogState';
import { Button } from '@repo/ui/components/button';
import type { MenuItem } from '@/features/menu/types/menu-item.types';

export default function MenuPage() {
  // Translations
  const t = useTranslations('common');
  const tMenu = useTranslations('menu');

  // Dialog states using custom hook
  const [itemFormOpen, setItemFormOpen] = useDialog();
  const [categoryFormOpen, setCategoryFormOpen] = useDialog();
  const [reorderMenuOpen, setReorderMenuOpen] = useDialog();

  // Store state
  const selectedStoreId = useAuthStore(selectSelectedStoreId);
  const editMenuItemId = useMenuStore(selectEditMenuItemId);
  const setEditMenuItemId = useMenuStore((state) => state.setEditMenuItemId);

  // Local state
  const [viewItemId, setViewItemId] = useState<string | null>(null);

  // Fetch categories with query key factory
  const { data: categories = [] } = useQuery({
    queryKey: menuKeys.categories(selectedStoreId!),
    queryFn: () => getCategories(selectedStoreId!),
    enabled: !!selectedStoreId,
  });

  // Event handlers
  const handleSelectItem = useCallback((item: MenuItem) => {
    setViewItemId(item.id);
  }, []);

  const handleCloseEditDialog = useCallback(() => {
    setEditMenuItemId(null);
  }, [setEditMenuItemId]);

  const handleCloseViewModal = useCallback(() => {
    setViewItemId(null);
  }, []);

  return (
    <>
      <div className="space-y-6">
        {/* Breadcrumb with translations */}
        <nav className="mb-4 text-sm text-gray-500">
          {t('home')} &gt; <span className="text-gray-800">{t('menu')}</span>
        </nav>

        <div className="flex items-center space-x-2">
          <Button
            variant="default"
            className="flex items-center"
            onClick={() => setItemFormOpen(true)}
          >
            <Plus className="mr-1 h-4 w-4" /> {tMenu('createItem')}
          </Button>

          <Button
            variant="default"
            className="flex items-center"
            onClick={() => setReorderMenuOpen(true)}
          >
            <GripVertical className="mr-1 h-4 w-4" /> {tMenu('reorderMenu')}
          </Button>
        </div>

        <div className="space-y-4">
          {categories.map((cat) => (
            <CategoryCard
              key={cat.id}
              category={cat}
              onSelectItem={handleSelectItem}
            />
          ))}
        </div>
      </div>

      {/* Dialogs */}
      <MenuItemFormDialog
        mode="create"
        open={itemFormOpen}
        onOpenChange={setItemFormOpen}
        editItemId={null}
      />

      <MenuItemFormDialog
        mode="edit"
        open={editMenuItemId !== null}
        onOpenChange={handleCloseEditDialog}
        editItemId={editMenuItemId}
      />

      <CategoryFormDialog
        open={categoryFormOpen}
        onOpenChange={setCategoryFormOpen}
      />

      <ReorderMenuDialog
        open={reorderMenuOpen}
        onOpenChange={setReorderMenuOpen}
      />

      <ItemModal
        id={viewItemId}
        open={viewItemId !== null}
        onClose={handleCloseViewModal}
      />
    </>
  );
}
