import { create } from 'zustand';
import { immer } from 'zustand/middleware/immer';
import {
  Cart,
  CartItem,
  AddItemPayload,
  UpdateItemPayload,
} from '@/features/cart/types/cart.types';
import {
  addItemToCart,
  updateCartItem,
  removeCartItem,
  clearMyCart,
} from '@/features/cart/services/cart.service';
import { debug } from '@/utils/debug';

interface CartState {
  cart: Cart | null;
  error: string | null;
}

/** Type for adding an item optimistically, omitting fields generated by server/DB */
export type OptimisticAddCartItem = Omit<
  CartItem,
  'id' | 'createdAt' | 'updatedAt' | 'cartId'
>;

interface CartActions {
  /** Directly sets the cart state (e.g., from initial fetch or WebSocket 'cart:updated' event) */
  setCart: (cart: Cart | null) => void;
  /** Sets cart error state (e.g., from WebSocket error events) */
  setError: (error: string | null) => void;
  /** Clears the cart state (e.g., on session end) */
  clearCartState: () => void;

  /** Adds an item optimistically, then calls the API. Final state update via WebSocket -> setCart. */
  optimisticAddItem: (cartItem: OptimisticAddCartItem) => Promise<void>;

  /** Updates an item optimistically, then calls the API. Final state update via WebSocket -> setCart. */
  optimisticUpdateItem: (payload: CartItem) => Promise<void>;

  /** Removes an item optimistically, then calls the API. Final state update via WebSocket -> setCart. */
  optimisticRemoveItem: (cartItemId: string) => Promise<void>;
  /** Clears the cart optimistically, then calls the API. Final state update via WebSocket -> setCart. */
  optimisticClearCart: () => Promise<void>;
}

export const useCartStore = create<CartState & CartActions>()(
  immer((set, get) => ({
    cart: null,
    error: null,

    setCart: (cart) => {
      debug.log('Setting cart state:', cart);
      set((state) => {
        state.cart = cart;
        state.error = null; // Clear error on successful update
      });
    },

    setError: (error) => {
      set((state) => {
        state.error = error;
      });
    },

    clearCartState: () => {
      set((state) => {
        state.cart = null;
        state.error = null;
      });
    },

    optimisticAddItem: async (cartItem) => {
      const originalCart = get().cart;
      if (!originalCart) {
        debug.error('Cannot add item: Cart state is null.');

        throw new Error('Cart is not initialized.');
      }

      const tempItemId = `temp-${Date.now()}`;
      set((state) => {
        if (!state.cart) return;

        const optimisticItem: CartItem = {
          ...cartItem,
          id: tempItemId,
          cartId: state.cart.id,
          createdAt: new Date().toISOString(),
          updatedAt: new Date().toISOString(),
        };
        state.cart.items.push(optimisticItem);
        debug.log('Optimistically added item:', optimisticItem);
      });

      try {
        const servicePayload: AddItemPayload = {
          menuItemId: cartItem.menuItem.id,
          quantity: cartItem.quantity,
          selectedOptionIds: cartItem.selectedOptions.map((o) => o.id),
          notes: cartItem.notes || null,
        };
        await addItemToCart(servicePayload);

        debug.log(
          'Successfully called addItemToCart API for temp ID:',
          tempItemId
        );
      } catch (error) {
        debug.error('Failed to add item via API:', error);

        set((state) => {
          debug.log('Rolling back optimistic add for temp ID:', tempItemId);
          state.cart = originalCart;
        });
        throw error;
      }
    },

    optimisticUpdateItem: async (payload) => {
      const originalCart = get().cart;
      const cartItemId = payload.id;

      if (!originalCart) {
        debug.error('Cannot update item: Cart state is null.');
        throw new Error('Cart is not initialized.');
      }

      set((state) => {
        if (!state.cart) return;
        const itemIndex = state.cart.items.findIndex(
          (item) => item.id === cartItemId
        );
        if (itemIndex > -1) {
          state.cart.items[itemIndex] = {
            ...payload,
            id: cartItemId,
            updatedAt: new Date().toISOString(),
          };
          debug.log(
            'Optimistically updated item:',
            state.cart.items[itemIndex]
          );
        } else {
          debug.warn(
            `OptimisticUpdateItem: Item with ID ${cartItemId} not found in cart.`
          );
        }
      });

      try {
        const servicePayload: UpdateItemPayload = {
          quantity: payload.quantity,
          notes: payload.notes,
        };
        await updateCartItem(cartItemId, servicePayload);

        debug.log(
          'Successfully called updateCartItem API for item ID:',
          cartItemId
        );
      } catch (error) {
        debug.error('Failed to update item via API:', error);

        set((state) => {
          debug.log('Rolling back optimistic update for item ID:', cartItemId);
          state.cart = originalCart;
        });
        throw error;
      }
    },

    optimisticRemoveItem: async (cartItemId) => {
      const originalCart = get().cart;
      if (!originalCart) {
        debug.error('Cannot remove item: Cart state is null.');
        throw new Error('Cart is not initialized.');
      }

      let itemRemoved = false;
      set((state) => {
        if (!state.cart) return;
        const initialLength = state.cart.items.length;
        state.cart.items = state.cart.items.filter(
          (item) => item.id !== cartItemId
        );
        itemRemoved = state.cart.items.length < initialLength;
        if (itemRemoved) {
          debug.log('Optimistically removed item ID:', cartItemId);
        } else {
          debug.warn(
            `OptimisticRemoveItem: Item with ID ${cartItemId} not found.`
          );
        }
      });

      if (!itemRemoved) return;

      try {
        await removeCartItem(cartItemId);

        debug.log(
          'Successfully called removeCartItem API for item ID:',
          cartItemId
        );
      } catch (error) {
        debug.error('Failed to remove item via API:', error);

        set((state) => {
          debug.log('Rolling back optimistic remove for item ID:', cartItemId);
          state.cart = originalCart;
        });
        throw error;
      }
    },

    optimisticClearCart: async () => {
      const originalCart = get().cart;
      if (!originalCart || originalCart.items.length === 0) {
        debug.log('Cart is already empty or null, skipping clear.');
        return;
      }

      set((state) => {
        if (state.cart) {
          state.cart.items = [];
          debug.log('Optimistically cleared cart items.');
        }
      });

      try {
        await clearMyCart();

        debug.log('Successfully called clearMyCart API.');
      } catch (error) {
        debug.error('Failed to clear cart via API:', error);

        set((state) => {
          debug.log('Rolling back optimistic clear cart.');
          state.cart = originalCart;
        });
        throw error;
      }
    },
  }))
);

// Selectors
export const selectCart = (state: CartState) => state.cart;
export const selectCartError = (state: CartState) => state.error;
export const selectCartItems = (state: CartState) => state.cart?.items ?? [];
export const selectCartItemCount = (state: CartState) =>
  state.cart?.items.reduce((sum, item) => sum + item.quantity, 0) ?? 0;
